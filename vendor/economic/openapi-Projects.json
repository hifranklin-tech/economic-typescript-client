{
  "openapi": "3.0.1",
  "info": {
    "title": "Visma e-conomic OpenAPI",
    "description": "# Changelog\r\n\r\n<details>\r\n  <summary>Click to see changelog.</summary>\r\n\r\n| Version | Description|\r\n|---------||\r\n| 22.0.0  | Added LastUpdated property to [`Project Activities`](#tag/Project-Activities). \r\n| 21.0.1  | Updated descriptions for timeentry prices. \r\n| 21.0.0  | Added OtherReference property to [`Project`](#tag/Projects) endpoints. \r\n| 20.0.1  | Updated descriptions for model properties. \r\n| 20.0.0  | Customer contacts and delivery locations endpoints deprecated. You can find the same enpoints in [`Customers API`](https://apis.e-conomic.com/#Customers) \r\n| 19.0.0  | Page-based endpoints were moved under /paged url and cursor-based endpoints dropped the /all.\r\n| 18.0.0  | Added isDeleted flag to [`customer-contacts`](#tag/Customer-contacts) and included deleted contacts in the response. <br> Deleted contacts can be used for history purposes, but cannot be set as reference persons on sales documents. <br> In previous versions only customer-contacts/id returns deleted contacts as well.\r\n| 17.0.2  | `TimeEntryEmployeeNumberCannotBeUpdated` and `MileageEmployeeNumberCannotBeUpdated` error codes removed. The change affects all versions, but we bumped the version for transparency.\r\n| 17.0.1  | New custom [`OpenAPI extension`](#section/Retrieving-data/Custom-extensions-in-OpenAPI-specification) added in the specification: `x-error-codes`. Existing `x-required-roles` extension converted to an array of strings.\r\n| 17.0.0  | Improved the error model. Added `code` and `property` fields to the model. `code` represents the error code. `property` is the field name on which the input validation failed.\r\n| 16.4.0  | [`customer-deliverylocations`](#tag/Customer-delivery-locations) endpoints added.\r\n| 16.3.0  | [`customer-contacts`](#tag/Customer-contacts) endpoints added.  \r\n| 16.2.2  | Added input validations for required string properties, if a string property is required it can't be empty, it should contain at least 1 character.\r\n| 16.2.1  | Error codes extended for [`mileages`](#tag/Mileage-entries) and [`timeentries`](#tag/Time-entries). Affects all the exisiting versions.\r\n| 16.2.0  | - [`employeegroups`](#operation/DeleteEmployeeGroupById) DELETE endpoint added. <br>- [`employees`](#operation/DeleteEmployeeById) DELETE endpoint added. <br>- [`project-employeegroups`](#operation/DeleteProjectEmployeeGroupById) DELETE endpoint added. <br>- [`project-employees`](#operation/DeleteProjectEmployeeById) DELETE endpoint added.\r\n| 16.1.0  | [`Time entry prices`](#tag/Time-entry-prices) and [`Mileage entry prices`](#tag/Mileage-entry-prices) endpoints added.\r\n| 16.0.0  | Changed parameter schema for [`mileages`](#operation/ApproveMileageEntries) and [`timeentries`](#operation/ApproveTimeEntries) approve endpoints.\r\n| 15.0.0  | Added cost and sales accounts properties in [`activitygroups`](#tag/Activity-Groups) endpoints.\r\n| 14.1.3  | - Added new filter for `IsAccessible` in [`activities`](#tag/Activities) endpoints. <br>- Added new filter for `IsBarred` in [`costtypes`](#tag/Cost-Types) endpoints.\r\n| 14.1.2  | - Added input validations for [`activitygroups`](#tag/Activity-Groups). <br>- Updated description for [`projectgroups`](#operation/CreateProjectGroup) properties.\r\n| 14.1.1  | Added input validations for [`projectgroups`](#operation/CreateProjectGroup).\r\n| 14.1.0  | [`project-employees-count`](#operation/GetNumberOfProjectEmployees) endpoint added.                                                                                                                                                                                                                                             \r\n| 14.0.0  | - [`project-activities`](#tag/Project-Activities) endpoints added. <br>- `projects/activities` have been deprecated.|\r\n| 13.2.0  | [`costtypegroups`](#tag/Cost-Type-Groups) endpoints added.|\r\n| 13.1.0  | [`costtypes`](#tag/Cost-Types) endpoints added.|\r\n| 13.0.0  | - [`projectgroups`](#operation/CreateProjectGroup) POST endpoint added, `Number` made non-required,<br>- [`activitygroups`](#operation/CreateActivityGroup) POST endpoint added, `Number` made non-required.|\r\n| 12.0.0  | [`projects`](#tag/Projects) `Number` made non-required|\r\n| 11.0.0  | [`employees`](#tag/Employees) `Number` made required.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\r\n| 10.1.2  | API version number moved to the server|\r\n| 10.1.1  | - [`activities`](#operation/GetAllowedActivities) `employeeNumber` maximum value changed to 999999. <br>- [`projects`](#operation/GetPagedListOfProjectUnderEmployee) `employeeNumber` maximum value changed to 999999.                                                                                                                                                                                                                                                                                                                                                                                             |\r\n| 10.1.0  | [`project-employees`](#operation/CreateProjectEmployee) POST endpoint added|\r\n| 10.0.0  | - [`activities`](#tag/Activities) POST and PUT endpoints added. <br>- [`activitygroups`](#tag/Activity-Groups) GET endpoints added. <br>- Object version field added to `activities`, `projectstatuses` and `projectgroups` endpoints.                                                                                                                                                                                                                                                                                                                                                                              |\r\n| 9.0.0   | `Project related settings for employee` resource renamed as `Project employee`|\r\n| 8.1.0   | [`project-customers`](#tag/Project-Customers) endpoints added|\r\n| 8.0.0   | - [`employeegroups`](#tag/Employee-groups) endpoints added: GET all paginated, GET count, POST and PUT. <br>- [`project-employeegroups`](#tag/Project-employee-groups) endpoints added: GET all paginated, GET all cursor-based, GET count, GET by number, POST and PUT. <br> - Object version field added to employee groups endpoints.                                                                                                                                                                                                                                                                            ||\r\n| 7.0.0   | [Projects related settings for employee](#tag/Project-employees) extended with new fields for Name, GroupNumber and IsBarred.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\r\n| 6.0.0   | Readonly property `IsReconciled` added to `TimeEntries` endpoint|\r\n| 5.1.0   | [Project delete](#operation/DeleteProjectById) endpoint added|\r\n| 5.0.0   | - Project-related properties such as `isUser`, `userId`, `canApprove`, `canInvoice`, `employeeType` in `/employees` moved to `/project-employees`. <br>- Properties `lastUpdated`, `costPrice`, `salesPrice` and `invoicedtotal` in `/projects` changed to readonly.<br>- Property `date` in `/timeentries` changed to mandatory.<br>- Access permission to `/employees` changed to requiring access to `Sales`.<br>- PUT endpoints for `/timeentries/{number}`, `/employees/{number}`, `/employeeprojectrelatedsettings/{number}` have been deprecated and new ones without `{number}` in the URL have been added. |\r\n| 4.0.0   | `project.CustomerNumber` made non-required, range check introduced|\r\n| 3.1.0   | Error messages of time entry approval improved, `timeEntry.IsApproved`, `mileage.IsApproved` and `mileage.IncludeApproval` made read-only.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\r\n| 3.0.0   | `mileage.Date` made required. Verification for `mileage.EmployeeNumber` and `mileage.Distance` added.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\r\n| 2.2.2   | Range check introduced in `projects.Number`, `employee.Number` and `employeeGroup.Number`|\r\n| 2.2.1   | Employees PATCH endpoint deprecated|\r\n| 2.2.0   | [`employeegroups/all`](#operation/GetAllEmployeeGroups) and [`employeegroups/{number}`](#operation/GetEmployeeGroupById) endpoints added.                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\r\n| 2.1.0   | [`/activities/allowed`](#operation/GetAllowedActivities) endpoint added to get allowed activities for an employee and project.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\r\n| 2.0.0   | Open API released! Endpoints related to Projects module added|\r\n\r\n</details>\r\n\n# TL;DR\r\n\r\n**Add these three headers to your requests.**\r\n\r\n| Header                | Value                      | What is this?                                                |\r\n| :-------------------- | :------------------------- | :----------------------------------------------------------- |\r\n| X-AppSecretToken      | YOUR_PRIVATE_TOKEN         | This identifies your app. This is your secret token. Try using the value `demo`. |\r\n| X-AgreementGrantToken | YOUR_AGREEMENT_GRANT_TOKEN | This identifies the grant issued by an agreement, to allow your app to access the agreements data. Try using the value `demo`. |\r\n| Content-Type          | application/json           | We’re a JSON based API. This tells us that you agree with us on using JSON. |\r\n\r\n**Optional headers:**\r\n\r\n| Header                | Value                      | What is this?                                                |\r\n| :-------------------- | :------------------------- | :----------------------------------------------------------- |\r\n| Idempotency-Key       | YOUR_IDEMPOTENCY_KEY       | This represents your own unique idempotency key. Enables you to make use of our [Idempotency Tokens](#section/Retrieving-data/Idempotency-tokens) feature. You can't use this feature with GET requests. |\r\n\r\n\r\n### Examples\r\n\r\n#### jQuery\r\n\r\n```javascript/jQuery\r\n$.ajax({\r\n    url: \"https://apis.e-conomic.com/api/v22.0.0/projects\",\r\n    dataType: \"json\",\r\n    headers: {\r\n        'X-AppSecretToken': \"demo\",\r\n        'X-AgreementGrantToken': \"demo\",\r\n        'Content-Type': \"application/json\"\r\n    },\r\n    type: \"GET\"\r\n})\r\n    .always(function (data) {\r\n    $(\"#output\").text(JSON.stringify(data, null, 4));\r\n});\r\n```\r\n\r\n#### cURL\r\n\r\n```curl\r\ncurl -H \"X-AppSecretToken: demo\" -H \"X-AgreementGrantToken: demo\" https://apis.e-conomic.com/api/v22.0.0/projects\r\n```\r\n\r\n\r\n\r\n# Introduction\r\n\r\nWelcome to the **Visma e-conomic OpenAPI** documentation!\r\n\r\nThe e-conomic API is a document-based JSON REST API. \r\n\r\nFor more in-depth information about e-conomic itself, please have a look at the e-copedia [http://wiki.e-conomic.dk](http://wiki.e-conomic.dk/).\r\n\r\n## Usage\r\n\r\n- **Generating a client** can easily be done using tools like [swagger-codegen](https://github.com/swagger-api/swagger-codegen) or others that work with [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) specs.\r\n\r\n\r\n## Versioning\r\n\r\nAPI releases are versioned using a three-part versioning scheme: `{major version}.{minor version}.{patch version}`.\r\n\r\nWe broadly follow [Semantic Versioning](https://semver.org/) principles when versioning the API. The major version number is incremented when a breaking change occurs. \r\n\r\nThe format is:\r\n\r\n`/api/v{major version}.{minor version}.{patch version}/{resource-name}`\r\n\r\nEach value of the above are integers and you should configure the specific version in each API call. \r\n\r\nAn example could be: `/api/v2.2.1/projects`\r\n\r\nTo track the changes of versions, please see our [changelog](#section/Changelog).\r\n\r\nWe reserve the right to deprecate versions at intervals since this allows for moving into a friendly environment for you faster.\r\n\r\n## Demo authentication\r\n\r\nIf you wish to try out the API before registering a developer agreement, you can do this by using the demo agreement, which mimics the authentication flow you will have to use when you create your app. All you have to do is specify HTTP header tokens `X-AgreementGrantToken: demo` and `X-AppSecretToken: demo`. Note however that you can only do GET requests with the demo agreement. If you want full access to our API's, you will need to register.\r\n\r\n# Retrieving data\r\n\r\nOur data is exposed as collections of items. Each item has many properties, with one property as a unique identifier, usually called `number` or `id`. You can always get a single item if you already know the unique identifier. In case the unique identifier is not known, you can always search the collection and retrieve an array of items that satisfy the search criteria, or retrieve only the count of items that satisfy the search criteria. When you search for items in a collection, you can always use filtering, sorting and pagination. When it comes to pagination, we offer two distinct approaches available on separate endpoints. You can read more about filtering, sorting and pagination in the following sections. \r\n\r\n## Filtering\r\n\r\nFiltering is enabled on all collection endpoints but not on all properties.\r\n\r\nFiltering on collections can be done using the query string parameter `filter`. A filter is made up of a set of predicates and follows a syntax inspired by mongoDB. A predicate is made up of a property name, an operator, and a value.\r\n\r\nExample: `?filter=name$eq:Joe`\r\n\r\nThis matches all resources with the value Joe in the property name.\r\n\r\nPredicates can be chained using either of the logical operators AND and OR.\r\n\r\nExample: `?filter=name$eq:Joe$and:city$like:*port`\r\n\r\nFiltering on strings is case insensitive.\r\n\r\n#### Filterable properties\r\nInformation about what properties allow filtering and on what operators can be found in the property in the schema for the collection. Each property that allows filtering has the property `\"x-filterable\"` in combination with `operators` set. If you try to filter on something that isn’t allowed the server will respond with a status code 400.\r\n\r\n#### Specifying Operator affinity\r\nIf you want to control the operator affinity then you can use parentheses.\r\n\r\nAn example is: `?filter=name$eq:Joe$and:(city$like:*port$or:age$lt:40)`\r\n\r\n#### URL Encoding\r\nURL parameter values should always be URL compatible. Always URL encode filter strings.\r\n\r\n#### Filter Operators\r\nThe possible filtering operators are:\r\n\r\n| Operator   | Syntax |\r\n| --------   | ------ |\r\n|Equals | $eq:|\r\n|Not equals | $ne:|\r\n|Greater than | $gt:|\r\n|Greater than or equal | $gte:|\r\n|Less than | $lt:|\r\n|Less than or equal | $lte:|\r\n|Substring match\t| $like:|\r\n|And also | $and:|\r\n|Or else | $or:|\r\n|In | $in:|\r\n|Not In | $nin:|\r\n\r\n#### Substring matching\r\n\r\nThe `$like:` operator supports both using wildcards (*) and not using wildcards. If no wildcards are used, the expression is considered a `contains` expression and effectively becomes a filter with a wildcard at the start of the string and one at the end of the string. This operator is only allowed on some properties.\r\n\r\n#### Escaping special characters in your filter\r\nTo not interfere with the parsing of the filter expression, certain escape sequences are necessary.\r\n\r\n- “$” is escaped with “$$”\r\n- “(” is escaped with “$(”\r\n- “)” is escaped with “$)”\r\n- “*” is escaped with “$*”\r\n- “,” is escaped with “$,”\r\n- “[” is escaped with “$[”\r\n- “]” is escaped with “$]”\r\n\r\n#### Using null values in your filter\r\nShould you want to filter for the nonexistence of a property (i.e. null value) you can use the null escape sequence.\r\n\r\n`$null:`\r\n\r\n#### Using in and not in operators\r\nTo determine whether a specified value matches any value in (or not in) a list you filter using the `$in:` or `$nin:` operator. The list to filter by has to be enclosed in brackets and values separated by commas.\r\n\r\n`customerNumber$in:[2,5,7,22,45]`\r\n\r\n\r\nIt is possible to also use the `$null:` keyword if you wish to include that in the filter. The max supported length of an array using the `$in:` or `$nin:` operator is 200.\r\n\r\n\r\n## Sorting\r\n\r\nSorting on strings is case insensitive.\r\n\r\n### Sort ascending\r\n\r\nSorting on collections can be done using the query string parameter ‘sort’.\r\n\r\n```\r\n?sort=name\r\n```\r\n\r\n### Sort descending\r\n\r\nThe default sort direction is ascending, but this can be turned by prepending a minus (-).\r\n\r\n```\r\n?sort=-name\r\n```\r\n\r\n### Sort by multiple properties\r\n\r\nIf you need to sort by multiple properties these can just be separated by commas. Mixing of directions is allowed.\r\n\r\n```\r\n?sort=-name,age\r\n```\r\n\r\n### Sort alphabetically\r\n\r\nIn certain cases, you might want to enforce that even numeric values are sorted alphabetically, so 1000 is less than 30. In those cases, you can prepend the sort property with a tilde (~).\r\n\r\n```\r\n?sort=~name\r\n```\r\n\r\n#### Sortable properties\r\nInformation about what properties are sortable can be found in the schema for the collection. Each property that allows sorting has the property `\"x-sortable\": true` set.\r\n\r\n\r\n## Pagination\r\n\r\nWhen it comes to retrieving a collection of items, you can use two distinct approaches:\r\n\r\n* **Cursor-based pagination** (continued loading of items using a `cursor` as a query parameter to get the next page of items)\r\n  * This is the recommended approach, and the one you should use by default.\r\n  * The endpoint naming scheme is **\"Retrieve all `Items`\"**. (Usage: `/{ITEM}?cursor={CURSOR_VALUE}`)\r\n\r\n\r\n* **Classic pagination** (limited functionality*. Specify `skippages` and `pagesize ` as query parameters to get a specific page of items)\r\n  * You should only consider using classic pagination, if you rely on loading pages (i.e. for list views or table/grid-based UI's).\r\n  * The endpoint naming scheme is **\"Retrieve a page of `Items`\"**. (Usage: `/{ITEM}/paged?skippages=0&pagesize=20`)  \r\n    \\* It's important to note that there is a limit of 10.000 items using this approach. Any items outside of the first 10.000 items will not be loaded.\r\n\r\nPlease bear in mind that the two approaches are supported by **separate endpoints**. To use classic pagination, add `/paged` to your request URL.\r\n\r\nIf you need to know the total count of items that you can expect to get from your search, you can use a separate endpoint called **\"Retrieve the number of `Items`\"**.  \r\nYou can also use the result of this endpoint to calculate the pagination navigation buttons for a table/grid-based UI.\r\n\r\n\r\n### Which approach should you use?\r\nWe highly recommend that you use cursor-based pagination because:\r\n- It is more performant and offers much faster retrieval of items;\r\n- It can be used for very large collections of many thousands or millions of items, whereas classic pagination is limited to only returning 10.000 results, everything else is ignored;  \r\n  Classic pagination is only appropriate when you have an app with a table/grid-based UI.\r\n\r\n### Cursor-based pagination\r\n\r\n#### How it works\r\n\r\nWhen you search for items in a large collection, the response will contain the first 1.000 items and a `cursor` that you can use in a subsequent request to get the next series of items. This way you can retrieve the next set of items only when needed (if 1.000 items suffice, you don't need to send a second request).\r\n\r\nPlease note that the cursor is currently the `id` of the first `item` on the next set and it should not be mistaken for the number of items which are yet to be displayed.\r\nAlso, if the cursor is not present in the response, it means that there are no more items in the results.\r\n\r\n##### Real world example\r\n\r\nI want to retrieve all projects.\r\n\r\n1) I send a request to `https://apis.e-conomic.com/api/v22.0.0/projects`\r\n   and get back an array of 1.000 projects, and a `cursor` with value `34781`\r\n\r\n\r\n2) I send a request for the next items in the resulting collection:  \r\n   `https://apis.e-conomic.com/api/v22.0.0/projects?cursor=34781`  \r\n   and get back an array of 1.000 projects and a cursor with value `87695`\r\n\r\n\r\n3) I send a request for the next items in the result:  \r\n   `https://apis.e-conomic.com/api/v22.0.0/projects?cursor=87695`  \r\n   and get back an array of 56 items and no cursor.  \r\n   No cursor means I have retrieved all the projects, i.e. I have reached the end of the list.\r\n\r\n\r\n### Classic pagination\r\n\r\nIf no parameters are used, the collection endpoint returns 20 items at a time. URL parameters allow you to increase this to up to 100 items or to skip pages if necessary.\r\n\r\n##### Real world example\r\n\r\nI want to show a grid with page size of 50 and pagination navigation buttons.\r\n\r\n1) I send a request to see how many projects there are in the collection:  \r\n   `https://apis.e-conomic.com/api/v22.0.0/projects/count`  \r\n   I get the number of projects in the collection, `2056`, and I can calculate the number of pages to be 2056 divided by 50 = 40 with 6 as remainder, meaning I have 41 pages total. I can then use this to present the user the navigation buttons.\r\n\r\n\r\n2) I send a request to retrieve the first page of projects that my user will see:  \r\n   `https://apis.e-conomic.com/api/v22.0.0/projects/paged?pagesize=50&sort=name`  \r\n   with this I get back an array of 50 projects, sorted alphabetically by the project name.\r\n\r\n\r\n3) Now if the user wants to see page number 6, I'll send a new request, skipping the first 5 pages to get the projects from page number 6:  \r\n   `https://apis.e-conomic.com/api/v22.0.0/projects/paged?pagesize=50&skippages=5&sort=name`  \r\n   I get back an array of 50 projects, that belong to page number 6 when sorting alphabetically by the project name.\r\n\r\n\r\n\r\n### Number of items in a collection\r\n\r\nAs mentioned before we offer endpoint to get the count of items in the collection. You can also use this info for calculation of pagination navigation in case of classic pagination.\r\n\r\nExample `https://apis.e-conomic.com/api/v22.0.0/projects/count`\r\n\r\n\r\n## HTTP Status Codes\r\n\r\nThe Open API returns these HTTP status codes.\r\n\r\n| Code | Text                   | Description                                                  |\r\n| :--- | :--------------------- | :----------------------------------------------------------- |\r\n| 200  | OK                     | Everything is OK                                             |\r\n| 201  | Created                | When you create resources, this is what you get. This will be accompanied by the created resource in the body and a location header with a link to the created resource. |\r\n| 204  | No Content             | In certain cases there is nothing to return. So we will let you know by returning a 204. |\r\n| 400  | Bad Request            | The request you made was somehow malformed. A malformed request could be failed validation on creation or updating. If you try to filter on something that isn’t filterable this is also what you’ll see. Whenever possible we will also try to include a developer hint to help you get around this issue. |\r\n| 401  | Unauthorized           | The credentials you supplied us with weren’t correct, or perhaps you forgot them altogether. If an agreement has revoked the grant they gave your app, this is what you will see. |\r\n| 403  | Forbidden              | You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued. |\r\n| 404  | Not Found              | This is returned when you try to request something that doesn’t exist. This could be a resource that has been deleted or just a URL you tried to hack. If you see a lot of these, it could be an indication that you aren’t using the links provided by the API. You should never need to concatenate any URLs. The API should provide you with the links needed. |\r\n| 405  | Method Not Allowed     | Not all endpoints support all HTTP methods. If you try issue a PUT request to a collection resource this is what you get. |\r\n| 415  | Unsupported Media Type | Our API is a JSON api. If you ask us to give you anything else, we give you this, and tell you why in the JSON body of the response. |\r\n| 500  | Internal Server Error  | We don’t like to see these, and they are flagged in our logs. When you see this, something went wrong on our end. Either try again, or contact our support. |\r\n\r\n\r\n## Required and Readonly Properties\r\n\r\nSince OpenAPI allows client generation based on the specification, we decided to use the same model/schema in our for both read and write endpoints where possible.\r\n\r\nThis led us to chose not to have the Id/Number in the URL parameter for PUT requests, but to use the one from the body, so there is no confusion.\r\n\r\nWhen a property is marked as `required` it means you need to provide a value on each POST and PUT requests.\r\n\r\nWhen a property is marked as `readonly` it means you should provide the same value you get in the GET requests, or do not send the property in the JSON at all (skip it).\r\n\r\n## Custom resource encoding\r\n\r\nFor some resource ids (the direct URL path to a resource) the question of non-alphanumeric characters must be solved in REST APIs by either encoding or replacement to ensure URL compatibility.\r\n\r\nIn the e-conomic REST API a subset of non-alphanumeric characters are replaced using a custom scheme for resource URLs:\r\n\r\n| Character        | Replacement |\r\n| :--------------- | :---------- |\r\n| “<”              | *0*         |\r\n| “>”              | *1*         |\r\n| “*”              | *2*         |\r\n| “%”              | *3*         |\r\n| “:”              | *4*         |\r\n| “&”              | *5*         |\r\n| “/”              | *6*         |\r\n| “\\”              | *7*         |\r\n| “_”              | *8*         |\r\n| “ ” (whitespace) | *9*         |\r\n| “?”              | *10*        |\r\n| “.”              | *11*        |\r\n| “#”              | *12*        |\r\n| “+”              | *13*        |\r\n\r\nExample: Product “My Awesome Product_Discount5%” Resource URL (self): https://apis.e-conomic.com/products/My_9_Awesome_9_Product_8_Discount5_3_\r\n\r\nAll other non-alphanumeric characters in resource URLs are standard URL encoded. Please refer to standard URL encoding for characters not mentioned above.\r\n\r\n## Implementation specifics\r\n\r\nHelpful details to know when implementing e-conomic REST.\r\n\r\n### Booleans\r\n\r\nBooleans should only be expected to be represented in responses when true. A false boolean is omitted from response body. The same logic applies to write operations such as POST and PUT.\r\n\r\n### Null values\r\n\r\nNull values are omitted from the response body.\r\n\r\n### Nulling\r\n\r\nWe do not generally accept null as a value and a validation exception should be expected. To null a property you must exclude it from your JSON on the write operation.\r\n\r\n## Object version\r\n\r\nObjectVersion is the mechanism that enforces updates only on latest state of an object.\r\nObjectVersion property is mandatory in Put Requests.\r\nObjectVersion property is retrieved on Get Request and needs to be included in Put Request.\r\nIf object was modified between Get and Put requests, Put request will fail with error code `409 Conflict`\r\n\r\n```\r\n{\r\n  \"message\": \"Update conflict. Version does not match.\",\r\n  \"developerHint\": \"The resource has been updated by another user. Retrieve the resource/object and try the update again. This is needed in order to prevent you from rolling back another user's update.\",\r\n  \"logId\": \"09580053-1141-4e7f-85e1-bed8600e0278\",\r\n  \"logTimeUtc\": \"2021-11-04T09:07:56\",\r\n  \"property\": \"version\"\r\n}\r\n```\r\n\r\n## Idempotency tokens\r\n Idempotency tokens are unique keys that help maintain the integrity of operations on the API’s. These tokens prevent accidental duplication of requests, ensuring that the same operation is not performed multiple times, even if the same request is sent repeatedly.\r\n\r\n When making a request, you can set `Idempotency-Key` header with your own unique value for that specific request. In case of a network failure, if you don't get the response, you can retry the request with the same value for the header. Our system will prevent duplicate requests, instead you will get the original response from our cache. \r\n\r\n Keep in mind that this is cached for only **one hour** window. \r\n\r\n When we return a response from the cache, we set a response header `X-ResultFromCache` to true.\r\n\r\n It’s important to note that **you will be responsible for generating and keeping track of these keys**.\r\n\r\n The [Idempotency Tokens feature](https://techtalk.e-conomic.com/idempotency-tokens-in-e-conomic-apis/) is not available for GET requests.\r\n\r\n## Custom extensions in OpenAPI specification\r\n\r\nIn the specification file, there are some custom extensions that developers can make use of when consuming endpoints. \r\nThose extensions are always prefixed by `x-`.\r\n\r\n1) `x-required-roles`: The list of roles that are required for each group of endpoints.\r\n2) `x-error-codes`: The list of error codes that are potentially returned from each group of endpoints.\r\n",
    "contact": {
      "url": "https://www.e-conomic.com/",
      "email": "api@e-conomic.com"
    },
    "version": "v22.0.0",
    "x-logo": {
      "url": ""
    }
  },
  "servers": [
    {
      "url": "https://apis.e-conomic.com/api/v22.0.0/"
    }
  ],
  "paths": {
    "/activities/paged": {
      "get": {
        "tags": [
          "Activities"
        ],
        "summary": "Retrieve a page of Activities",
        "description": "Use this endpoint to load a page of Activities.",
        "operationId": "GetPageOfActivities",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "SkipPages",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Activity"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/activities": {
      "get": {
        "tags": [
          "Activities"
        ],
        "summary": "Retrieve all Activities",
        "description": "Use this endpoint to retrieve all Activities in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)",
        "operationId": "GetAllActivities",
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityCursorResults"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Activities"
        ],
        "summary": "Create a single Activity",
        "description": "Use this endpoint to create a single Activity.",
        "operationId": "CreateActivity",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Activity"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome activity"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Activity"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome activity"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Activity"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome activity"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Activity"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome activity"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResult"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Activities"
        ],
        "summary": "Update a single Activity",
        "description": "Use this endpoint to update a single Activity.",
        "operationId": "UpdateActivity",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Activity"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome activity"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Activity"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome activity"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Activity"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome activity"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Activity"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome activity"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/activities/count": {
      "get": {
        "tags": [
          "Activities"
        ],
        "summary": "Retrieve the number of Activities",
        "description": "Call this endpoint to get the number of Activities. You can use a filtering as well.",
        "operationId": "GetNumberOfActivities",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{number}": {
      "get": {
        "tags": [
          "Activities"
        ],
        "summary": "Retrieve single Activity",
        "description": "Use this endpoint to load a single Activity by id/number.",
        "operationId": "GetActivityById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/activities/allowed": {
      "get": {
        "tags": [
          "Activities"
        ],
        "summary": "Retrieve allowed activities",
        "description": "Use this endpoint to get all the activities that the employee is allowed to register an entry on for a given project. Potential restrictions of registration are based on recording rules in the UI, which cannot be modified through the API. Add the employee number and project to your query parameter to obtain the allowed activities for registrations.",
        "operationId": "GetAllowedActivities",
        "parameters": [
          {
            "name": "employeeNumber",
            "in": "query",
            "description": "The employee number.",
            "required": true,
            "schema": {
              "maximum": 999999,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectNumber",
            "in": "query",
            "description": "The project number.",
            "required": true,
            "schema": {
              "maximum": 999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of allowed activities.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Activity"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Activity"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Activity"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, user has no access to requested data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/activitygroups/{number}": {
      "get": {
        "tags": [
          "Activity Groups"
        ],
        "summary": "Retrieve single Activity Group",
        "description": "Use this endpoint to load a single Activity Group by id/number.",
        "operationId": "GetActivityGroupById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityGroup"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/activitygroups/paged": {
      "get": {
        "tags": [
          "Activity Groups"
        ],
        "summary": "Retrieve a page of Activity Groups",
        "description": "Use this endpoint to load a page of Activity Groups.",
        "operationId": "GetPageOfActivityGroups",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "SkipPages",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityGroup"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/activitygroups": {
      "get": {
        "tags": [
          "Activity Groups"
        ],
        "summary": "Retrieve all Activity Groups",
        "description": "Use this endpoint to retrieve all Activity Groups in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)",
        "operationId": "GetAllActivityGroups",
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityGroupCursorResults"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Activity Groups"
        ],
        "summary": "Create a single Activity Group",
        "description": "Use this endpoint to create a single Activity Group.",
        "operationId": "CreateActivityGroup",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ActivityGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome activity group"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ActivityGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome activity group"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ActivityGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome activity group"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ActivityGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome activity group"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResult"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/activitygroups/count": {
      "get": {
        "tags": [
          "Activity Groups"
        ],
        "summary": "Retrieve the number of Activity Groups",
        "description": "Call this endpoint to get the number of Activity Groups. You can use a filtering as well.",
        "operationId": "GetNumberOfActivityGroups",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/costtypegroups/{number}": {
      "get": {
        "tags": [
          "Cost Type Groups"
        ],
        "summary": "Retrieve single Cost Type Group",
        "description": "Use this endpoint to load a single Cost Type Group by id/number.",
        "operationId": "GetCostTypeGroupById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostTypeGroup"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/costtypegroups/paged": {
      "get": {
        "tags": [
          "Cost Type Groups"
        ],
        "summary": "Retrieve a page of Cost Type Groups",
        "description": "Use this endpoint to load a page of Cost Type Groups.",
        "operationId": "GetPageOfCostTypeGroups",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "SkipPages",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CostTypeGroup"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/costtypegroups": {
      "get": {
        "tags": [
          "Cost Type Groups"
        ],
        "summary": "Retrieve all Cost Type Groups",
        "description": "Use this endpoint to retrieve all Cost Type Groups in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)",
        "operationId": "GetAllCostTypeGroups",
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostTypeGroupCursorResults"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/costtypegroups/count": {
      "get": {
        "tags": [
          "Cost Type Groups"
        ],
        "summary": "Retrieve the number of Cost Type Groups",
        "description": "Call this endpoint to get the number of Cost Type Groups. You can use a filtering as well.",
        "operationId": "GetNumberOfCostTypeGroups",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/costtypes/{number}": {
      "get": {
        "tags": [
          "Cost Types"
        ],
        "summary": "Retrieve single Cost Type",
        "description": "Use this endpoint to load a single Cost Type by id/number.",
        "operationId": "GetCostTypeById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostType"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/costtypes/paged": {
      "get": {
        "tags": [
          "Cost Types"
        ],
        "summary": "Retrieve a page of Cost Types",
        "description": "Use this endpoint to load a page of Cost Types.",
        "operationId": "GetPageOfCostTypes",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "SkipPages",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CostType"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/costtypes": {
      "get": {
        "tags": [
          "Cost Types"
        ],
        "summary": "Retrieve all Cost Types",
        "description": "Use this endpoint to retrieve all Cost Types in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)",
        "operationId": "GetAllCostTypes",
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostTypeCursorResults"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/costtypes/count": {
      "get": {
        "tags": [
          "Cost Types"
        ],
        "summary": "Retrieve the number of Cost Types",
        "description": "Call this endpoint to get the number of Cost Types. You can use a filtering as well.",
        "operationId": "GetNumberOfCostTypes",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/employeegroups": {
      "get": {
        "tags": [
          "Employee groups"
        ],
        "summary": "Retrieve all Employee groups",
        "description": "Use this endpoint to retrieve all Employee groups in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)",
        "operationId": "GetAllEmployeeGroups",
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeGroupCursorResults"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employee groups"
        ],
        "summary": "Create a single Employee group",
        "description": "Use this endpoint to create a single Employee group.",
        "operationId": "CreateEmployeeGroup",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EmployeeGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee group"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EmployeeGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee group"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EmployeeGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee group"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EmployeeGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee group"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResult"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee groups"
        ],
        "summary": "Update a single Employee group",
        "description": "Use this endpoint to update a single Employee group.",
        "operationId": "UpdateEmployeeGroup",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EmployeeGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee group"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EmployeeGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee group"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EmployeeGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee group"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EmployeeGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee group"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/employeegroups/{number}": {
      "get": {
        "tags": [
          "Employee groups"
        ],
        "summary": "Retrieve single Employee group",
        "description": "Use this endpoint to load a single Employee group by id/number.",
        "operationId": "GetEmployeeGroupById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeGroup"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employee groups"
        ],
        "summary": "Delete single Employee group",
        "description": "Use this endpoint to delete a single Employee group by id/number.",
        "operationId": "DeleteEmployeeGroupById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/employeegroups/paged": {
      "get": {
        "tags": [
          "Employee groups"
        ],
        "summary": "Retrieve a page of Employee groups",
        "description": "Use this endpoint to load a page of Employee groups.",
        "operationId": "GetPageOfEmployeeGroups",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "SkipPages",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeGroup"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/employeegroups/count": {
      "get": {
        "tags": [
          "Employee groups"
        ],
        "summary": "Retrieve the number of Employee groups",
        "description": "Call this endpoint to get the number of Employee groups. You can use a filtering as well.",
        "operationId": "GetNumberOfEmployeeGroups",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/employees": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Retrieve all Employees",
        "description": "Use this endpoint to retrieve all Employees in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)",
        "operationId": "GetAllEmployees",
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeCursorResults"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Create a single Employee",
        "description": "Use this endpoint to create a single Employee.",
        "operationId": "CreateEmployee",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResult"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employees"
        ],
        "summary": "Update a single Employee",
        "description": "Use this endpoint to update a single Employee.",
        "operationId": "UpdateEmployee",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/employees/paged": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Retrieve a page of Employees",
        "description": "Use this endpoint to load a page of Employees.",
        "operationId": "GetPageOfEmployees",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "SkipPages",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Employee"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/employees/{number}": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Retrieve single Employee",
        "description": "Use this endpoint to load a single Employee by id/number.",
        "operationId": "GetEmployeeById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employees"
        ],
        "summary": "Delete single Employee",
        "description": "Use this endpoint to delete a single Employee by id/number.",
        "operationId": "DeleteEmployeeById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/employees/count": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Retrieve the number of Employees",
        "description": "Call this endpoint to get the number of Employees. You can use a filtering as well.",
        "operationId": "GetNumberOfEmployees",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/mileageprices/{number}": {
      "get": {
        "tags": [
          "Mileage entry prices"
        ],
        "summary": "Retrieve single Mileage entry prices",
        "description": "Use this endpoint to load a single Mileage entry prices by id/number.",
        "operationId": "GetMileagePricesById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MileagePrices"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/mileageprices/paged": {
      "get": {
        "tags": [
          "Mileage entry prices"
        ],
        "summary": "Retrieve a page of Mileage entry prices",
        "description": "Use this endpoint to load a page of Mileage entry prices.",
        "operationId": "GetPageOfMileageEntryPrices",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "SkipPages",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MileagePrices"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/mileageprices": {
      "get": {
        "tags": [
          "Mileage entry prices"
        ],
        "summary": "Retrieve all Mileage entry prices",
        "description": "Use this endpoint to retrieve all Mileage entry prices in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)",
        "operationId": "GetAllMileageEntryPrices",
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MileagePricesCursorResults"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/mileages/{number}": {
      "get": {
        "tags": [
          "Mileage entries"
        ],
        "summary": "Retrieve single Mileage entry",
        "description": "Use this endpoint to load a single Mileage entry by id/number.",
        "operationId": "GetMileageById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mileage"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Mileage entries"
        ],
        "summary": "Delete single Mileage entry",
        "description": "Use this endpoint to delete a single Mileage entry by id/number.",
        "operationId": "DeleteMileageById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/mileages/paged": {
      "get": {
        "tags": [
          "Mileage entries"
        ],
        "summary": "Retrieve a page of Mileage entries",
        "description": "Use this endpoint to load a page of Mileage entries.",
        "operationId": "GetPageOfMileageEntries",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "SkipPages",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Mileage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/mileages": {
      "get": {
        "tags": [
          "Mileage entries"
        ],
        "summary": "Retrieve all Mileage entries",
        "description": "Use this endpoint to retrieve all Mileage entries in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)",
        "operationId": "GetAllMileageEntries",
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MileageCursorResults"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Mileage entries"
        ],
        "summary": "Create a single Mileage entry",
        "description": "Use this endpoint to create a single Mileage entry.",
        "operationId": "CreateMileage",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Mileage"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome mileage"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Mileage"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome mileage"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Mileage"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome mileage"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Mileage"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome mileage"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResult"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Mileage entries"
        ],
        "summary": "Update a single Mileage entry",
        "description": "Use this endpoint to update a single Mileage entry.",
        "operationId": "UpdateMileage",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Mileage"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome mileage"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Mileage"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome mileage"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Mileage"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome mileage"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Mileage"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome mileage"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/mileages/count": {
      "get": {
        "tags": [
          "Mileage entries"
        ],
        "summary": "Retrieve the number of Mileage entries",
        "description": "Call this endpoint to get the number of Mileage entries. You can use a filtering as well.",
        "operationId": "GetNumberOfMileageEntries",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/mileages/approve": {
      "post": {
        "tags": [
          "Mileages",
          "Mileage entries"
        ],
        "summary": "Approve a list of Mileage entries",
        "description": "Use this endpoint to approve a list of Mileage entries.",
        "operationId": "ApproveMileageEntries",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MileageNumbersCollection"
                  }
                ],
                "example": {
                  "numbers": [
                    1,
                    2,
                    3
                  ]
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MileageNumbersCollection"
                  }
                ],
                "example": {
                  "numbers": [
                    1,
                    2,
                    3
                  ]
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MileageNumbersCollection"
                  }
                ],
                "example": {
                  "numbers": [
                    1,
                    2,
                    3
                  ]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MileageNumbersCollection"
                  }
                ],
                "example": {
                  "numbers": [
                    1,
                    2,
                    3
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/project-activities/paged": {
      "get": {
        "tags": [
          "Project Activities"
        ],
        "summary": "Retrieve a page of Project Activities",
        "description": "Use this endpoint to load a page of Project Activities.",
        "operationId": "GetPageOfProjectActivities",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "SkipPages",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectActivity"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/project-activities": {
      "get": {
        "tags": [
          "Project Activities"
        ],
        "summary": "Retrieve all Project Activities",
        "description": "Use this endpoint to retrieve all Project Activities in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)",
        "operationId": "GetAllProjectActivities",
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectActivityCursorResults"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project Activities"
        ],
        "summary": "Create a single Project Activity",
        "description": "Use this endpoint to create a single Project Activity.",
        "operationId": "CreateProjectActivity",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectActivity"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project activity"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectActivity"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project activity"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectActivity"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project activity"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectActivity"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project activity"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResult"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project Activities"
        ],
        "summary": "Update a single Project Activity",
        "description": "Use this endpoint to update a single Project Activity.",
        "operationId": "UpdateProjectActivity",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectActivity"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project activity"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectActivity"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project activity"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectActivity"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project activity"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectActivity"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project activity"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/project-activities/{number}": {
      "get": {
        "tags": [
          "Project Activities"
        ],
        "summary": "Retrieve single Project Activity",
        "description": "Use this endpoint to load a single Project Activity by id/number.",
        "operationId": "GetProjectActivityById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectActivity"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project Activities"
        ],
        "summary": "Delete single Project Activity",
        "description": "Use this endpoint to delete a single Project Activity by id/number.",
        "operationId": "DeleteProjectActivityById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/project-activities/count": {
      "get": {
        "tags": [
          "Project Activities"
        ],
        "summary": "Retrieve the number of Project Activities",
        "description": "Call this endpoint to get the number of Project Activities. You can use a filtering as well.",
        "operationId": "GetNumberOfProjectActivities",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/project-customers/{number}": {
      "get": {
        "tags": [
          "Project Customers"
        ],
        "summary": "Retrieve single Project Customer",
        "description": "Use this endpoint to load a single Project Customer by id/number.",
        "operationId": "GetProjectCustomerById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomer"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/project-customers/paged": {
      "get": {
        "tags": [
          "Project Customers"
        ],
        "summary": "Retrieve a page of Project Customers",
        "description": "Use this endpoint to load a page of Project Customers.",
        "operationId": "GetPageOfProjectCustomers",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "SkipPages",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectCustomer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/project-customers": {
      "get": {
        "tags": [
          "Project Customers"
        ],
        "summary": "Retrieve all Project Customers",
        "description": "Use this endpoint to retrieve all Project Customers in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)",
        "operationId": "GetAllProjectCustomers",
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomerCursorResults"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/project-customers/count": {
      "get": {
        "tags": [
          "Project Customers"
        ],
        "summary": "Retrieve the number of Project Customers",
        "description": "Call this endpoint to get the number of Project Customers. You can use a filtering as well.",
        "operationId": "GetNumberOfProjectCustomers",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/project-employeegroups": {
      "get": {
        "tags": [
          "Project employee groups"
        ],
        "summary": "Retrieve all Project employee groups",
        "description": "Use this endpoint to retrieve all Project employee groups in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)",
        "operationId": "GetAllProjectEmployeeGroups",
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEmployeeGroupCursorResults"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project employee groups"
        ],
        "summary": "Create a single Project employee group",
        "description": "Use this endpoint to create a single Project employee group.",
        "operationId": "CreateProjectEmployeeGroup",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectEmployeeGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee group"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectEmployeeGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee group"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectEmployeeGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee group"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectEmployeeGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee group"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResult"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project employee groups"
        ],
        "summary": "Update a single Project employee group",
        "description": "Use this endpoint to update a single Project employee group.",
        "operationId": "UpdateProjectEmployeeGroup",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectEmployeeGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee group"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectEmployeeGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee group"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectEmployeeGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee group"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectEmployeeGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome employee group"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/project-employeegroups/{number}": {
      "get": {
        "tags": [
          "Project employee groups"
        ],
        "summary": "Retrieve single Project employee group",
        "description": "Use this endpoint to load a single Project employee group by id/number.",
        "operationId": "GetProjectEmployeeGroupById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEmployeeGroup"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project employee groups"
        ],
        "summary": "Delete single Project employee group",
        "description": "Use this endpoint to delete a single Project employee group by id/number.",
        "operationId": "DeleteProjectEmployeeGroupById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/project-employeegroups/paged": {
      "get": {
        "tags": [
          "Project employee groups"
        ],
        "summary": "Retrieve a page of Project employee groups",
        "description": "Use this endpoint to load a page of Project employee groups.",
        "operationId": "GetPageOfProjectEmployeeGroups",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "SkipPages",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectEmployeeGroup"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/project-employeegroups/count": {
      "get": {
        "tags": [
          "Project employee groups"
        ],
        "summary": "Retrieve the number of Project employee groups",
        "description": "Call this endpoint to get the number of Project employee groups. You can use a filtering as well.",
        "operationId": "GetNumberOfProjectEmployeeGroups",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/project-employees": {
      "get": {
        "tags": [
          "Project employees"
        ],
        "summary": "Retrieve all Project employees",
        "description": "Use this endpoint to retrieve all Project employees in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)",
        "operationId": "GetAllProjectEmployees",
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEmployeeCursorResults"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project employees"
        ],
        "summary": "Create a single Project employee",
        "description": "Use this endpoint to create a single Project employee.",
        "operationId": "CreateProjectEmployee",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectEmployee"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project employee"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectEmployee"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project employee"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectEmployee"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project employee"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectEmployee"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project employee"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResult"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project employees"
        ],
        "summary": "Update a single Project employee",
        "description": "Use this endpoint to update a single Project employee.",
        "operationId": "UpdateProjectEmployee",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectEmployee"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project employee"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectEmployee"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project employee"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectEmployee"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project employee"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectEmployee"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project employee"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/project-employees/count": {
      "get": {
        "tags": [
          "Project employees"
        ],
        "summary": "Retrieve the number of Project employees",
        "description": "Call this endpoint to get the number of Project employees. You can use a filtering as well.",
        "operationId": "GetNumberOfProjectEmployees",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/project-employees/paged": {
      "get": {
        "tags": [
          "Project employees"
        ],
        "summary": "Retrieve a page of Project employees",
        "description": "Use this endpoint to load a page of Project employees.",
        "operationId": "GetPageOfProjectEmployees",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "SkipPages",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectEmployee"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/project-employees/{number}": {
      "get": {
        "tags": [
          "Project employees"
        ],
        "summary": "Retrieve single Project employee",
        "description": "Use this endpoint to load a single Project employee by id/number.",
        "operationId": "GetProjectEmployeeById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEmployee"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project employees"
        ],
        "summary": "Delete single Project employee",
        "description": "Use this endpoint to delete a single Project employee by id/number.",
        "operationId": "DeleteProjectEmployeeById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projectgroups/paged": {
      "get": {
        "tags": [
          "Project Groups"
        ],
        "summary": "Retrieve a page of Project Groups",
        "description": "Use this endpoint to load a page of Project Groups.",
        "operationId": "GetPageOfProjectGroups",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "SkipPages",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectGroup"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projectgroups": {
      "get": {
        "tags": [
          "Project Groups"
        ],
        "summary": "Retrieve all Project Groups",
        "description": "Use this endpoint to retrieve all Project Groups in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)",
        "operationId": "GetAllProjectGroups",
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGroupCursorResults"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project Groups"
        ],
        "summary": "Create a single Project Group",
        "description": "Use this endpoint to create a single Project Group.",
        "operationId": "CreateProjectGroup",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome projectGroup"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome projectGroup"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome projectGroup"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectGroup"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome projectGroup"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResult"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projectgroups/count": {
      "get": {
        "tags": [
          "Project Groups"
        ],
        "summary": "Retrieve the number of Project Groups",
        "description": "Call this endpoint to get the number of Project Groups. You can use a filtering as well.",
        "operationId": "GetNumberOfProjectGroups",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projectgroups/{number}": {
      "get": {
        "tags": [
          "Project Groups"
        ],
        "summary": "Retrieve single Project Group",
        "description": "Use this endpoint to load a single Project Group by id/number.",
        "operationId": "GetProjectGroupById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGroup"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/paged": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Retrieve a page of Projects",
        "description": "Use this endpoint to load a page of Projects.",
        "operationId": "GetPageOfProjects",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "SkipPages",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Retrieve all Projects",
        "description": "Use this endpoint to retrieve all Projects in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)",
        "operationId": "GetAllProjects",
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCursorResults"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create a single Project",
        "description": "Use this endpoint to create a single Project.",
        "operationId": "CreateProject",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Project"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Project"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Project"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Project"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResult"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update a single Project",
        "description": "Use this endpoint to update a single Project.",
        "operationId": "UpdateProject",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Project"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Project"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Project"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Project"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome project"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/count": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Retrieve the number of Projects",
        "description": "Call this endpoint to get the number of Projects. You can use a filtering as well.",
        "operationId": "GetNumberOfProjects",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{number}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Retrieve single Project",
        "description": "Use this endpoint to load a single Project by id/number.",
        "operationId": "GetProjectById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete single Project",
        "description": "Use this endpoint to delete a single Project by id/number.",
        "operationId": "DeleteProjectById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/allowed": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Retrieve the allowed projects that employee can register an entry on.",
        "description": "Use this endpoint to get all the projects that the employee is allowed to register an entry on. Potential restrictions of registration are based on recording rules in the UI, which cannot be modified through the API. Add the employee number to your query parameter to obtain the allowed projects for registrations.",
        "operationId": "GetPagedListOfProjectUnderEmployee",
        "parameters": [
          {
            "name": "employeeNumber",
            "in": "query",
            "description": "The employee number.",
            "required": true,
            "schema": {
              "maximum": 999999,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** The data you are sending is not passing our verification logic. Since this can be due to various reasons, you can check the message for the actual reason.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projectstatuses/paged": {
      "get": {
        "tags": [
          "Project Statuses"
        ],
        "summary": "Retrieve a page of Project Statuses",
        "description": "Use this endpoint to load a page of Project Statuses.",
        "operationId": "GetPageOfProjectStatuses",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "SkipPages",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectStatus"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projectstatuses": {
      "get": {
        "tags": [
          "Project Statuses"
        ],
        "summary": "Retrieve all Project Statuses",
        "description": "Use this endpoint to retrieve all Project Statuses in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)",
        "operationId": "GetAllProjectStatuses",
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStatusCursorResults"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projectstatuses/count": {
      "get": {
        "tags": [
          "Project Statuses"
        ],
        "summary": "Retrieve the number of Project Statuses",
        "description": "Call this endpoint to get the number of Project Statuses. You can use a filtering as well.",
        "operationId": "GetNumberOfProjectStatuses",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projectstatuses/{number}": {
      "get": {
        "tags": [
          "Project Statuses"
        ],
        "summary": "Retrieve single Project Status",
        "description": "Use this endpoint to load a single Project Status by id/number.",
        "operationId": "GetProjectStatusById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStatus"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/timeentries/{number}": {
      "get": {
        "tags": [
          "Time entries"
        ],
        "summary": "Retrieve single Time entry",
        "description": "Use this endpoint to load a single Time entry by id/number.",
        "operationId": "GetTimeEntryById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeEntry"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Time entries"
        ],
        "summary": "Delete single Time entry",
        "description": "Use this endpoint to delete a single Time entry by id/number.",
        "operationId": "DeleteTimeEntryById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/timeentries/paged": {
      "get": {
        "tags": [
          "Time entries"
        ],
        "summary": "Retrieve a page of Time entries",
        "description": "Use this endpoint to load a page of Time entries.",
        "operationId": "GetPageOfTimeEntries",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "SkipPages",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeEntry"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/timeentries": {
      "get": {
        "tags": [
          "Time entries"
        ],
        "summary": "Retrieve all Time entries",
        "description": "Use this endpoint to retrieve all Time entries in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)",
        "operationId": "GetAllTimeEntries",
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeEntryCursorResults"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Time entries"
        ],
        "summary": "Create a single Time entry",
        "description": "Use this endpoint to create a single Time entry.",
        "operationId": "CreateTimeEntry",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimeEntry"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome time entry"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimeEntry"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome time entry"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimeEntry"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome time entry"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimeEntry"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome time entry"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResult"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Time entries"
        ],
        "summary": "Update a single Time entry",
        "description": "Use this endpoint to update a single Time entry.",
        "operationId": "UpdateTimeEntry",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimeEntry"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome time entry"
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimeEntry"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome time entry"
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimeEntry"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome time entry"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimeEntry"
                  }
                ],
                "example": {
                  "Id": 1,
                  "Description": "An awesome time entry"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/timeentries/count": {
      "get": {
        "tags": [
          "Time entries"
        ],
        "summary": "Retrieve the number of Time entries",
        "description": "Call this endpoint to get the number of Time entries. You can use a filtering as well.",
        "operationId": "GetNumberOfTimeEntries",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/timeentries/approve": {
      "post": {
        "tags": [
          "TimeEntries",
          "Time entries"
        ],
        "summary": "Approve a list of Time entries",
        "description": "Use this endpoint to approve a list of Time entries.",
        "operationId": "ApproveTimeEntries",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimeEntryNumbersCollection"
                  }
                ],
                "example": {
                  "numbers": [
                    1,
                    2,
                    3
                  ]
                }
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimeEntryNumbersCollection"
                  }
                ],
                "example": {
                  "numbers": [
                    1,
                    2,
                    3
                  ]
                }
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimeEntryNumbersCollection"
                  }
                ],
                "example": {
                  "numbers": [
                    1,
                    2,
                    3
                  ]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimeEntryNumbersCollection"
                  }
                ],
                "example": {
                  "numbers": [
                    1,
                    2,
                    3
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/timeentryprices/{number}": {
      "get": {
        "tags": [
          "Time entry prices"
        ],
        "summary": "Retrieve single Time entry prices",
        "description": "Use this endpoint to load a single Time entry prices by id/number.",
        "operationId": "GetTimeEntryPricesById",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeEntryPrices"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "**Resource not found.** The resource you have been looking for does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/timeentryprices/paged": {
      "get": {
        "tags": [
          "Time entry prices"
        ],
        "summary": "Retrieve a page of Time entry prices",
        "description": "Use this endpoint to load a page of Time entry prices.",
        "operationId": "GetPageOfTimeEntryPrices",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "SkipPages",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "description": "Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeEntryPrices"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/timeentryprices": {
      "get": {
        "tags": [
          "Time entry prices"
        ],
        "summary": "Retrieve all Time entry prices",
        "description": "Use this endpoint to retrieve all Time entry prices in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)",
        "operationId": "GetAllTimeEntryPrices",
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "description": "Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeEntryPricesCursorResults"
                }
              }
            }
          },
          "400": {
            "description": "**Bad request.** Your request does not pass our validation. See the message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Activity": {
        "required": [
          "groupNumber",
          "name",
          "number"
        ],
        "type": "object",
        "properties": {
          "number": {
            "maximum": 999999999,
            "minimum": 1,
            "type": "integer",
            "description": "The unique number of the activity.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "groupNumber": {
            "type": "integer",
            "description": "The number of the activity group that the activity belongs to.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The name of the activity.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin, like",
            "x-sortable": false
          },
          "isAccessible": {
            "type": "boolean",
            "description": "Flag indicating if time entries can be registered on the activity or not. It should be set to true if you want to be able to acess the activity.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "inLieuCode": {
            "type": "integer",
            "description": "If time in lieu is used, this defines which code the activity should utilize when registered upon.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "hideInSearch": {
            "type": "boolean",
            "description": "Flag indicating if an activity should be hidden from employees when they create a time entry in the e-conomic UI.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cutoffDate": {
            "type": "string",
            "description": "The date when the salesPriceBefore stops having effect and gets replaced with salesPriceAfter.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "format": "date-time",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "salesPriceBefore": {
            "type": "number",
            "description": "The price for a given activity to be applied until the CutOffDate. \nThe activity sales price determines the sales price of a time entry - the time that an employee spends working on a project. <p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "format": "double",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "salesPriceAfter": {
            "type": "number",
            "description": "The price for a given activity to be applied after the CutOffDate. \nThe activity sales price determines the sales price of a time entry - the time that an employee spends working on a project.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "format": "double",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "costPriceMarkupPercentage": {
            "type": "number",
            "description": "Property used to adjust the cost price of the time registered on the activity. \nThe cost price of the time entry is calculated as follows: CostPrice = (employee costPrice + activity costPriceMarkupPercentage) x time entry numberOfHours.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "format": "double",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "objectVersion": {
            "type": "string",
            "description": "The object version, required for PUT requests to help ensure that updates made by others don’t get overwritten by your update request.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "Id": 1,
          "Description": "An awesome activity"
        }
      },
      "ActivityCursorResults": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Activity"
            },
            "description": "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cursor": {
            "type": "string",
            "description": "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "description": "Array of objects along with a cursor. Max number in the array returned is 1000",
        "example": {
          "cursor": "234",
          "items": [
            {
              "id": "13",
              "name": "Patrick"
            },
            {
              "id": "16",
              "name": "John"
            }
          ]
        }
      },
      "ActivityGroup": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "The unique number of the activity group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The name of the activity group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: true</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin, like",
            "x-sortable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActivityGroupType"
              }
            ],
            "description": "The activity group type determines whether a customer can be invoiced for the time entries registered on an activty or not.  \nOnly activities that are part of a productive, invoiceable group support billable time entries.  \nActivity group types are: \n- 1: Productive, invoiceable \n- 2: Productive, non-invoiceable \n- 3: Unproductive - holidays, illness or administrative activities.  \n<p class='filter'>Filterable: eq, ne</p><p class='sort'>Sortable: true</p>",
            "x-filterable": "eq, ne",
            "x-sortable": true
          },
          "includeCostPriceInFinance": {
            "type": "boolean",
            "description": "Flag indicating if activity costs are to be included in accounting or not.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "costAccountClosed": {
            "type": "integer",
            "description": "The account number to register costs for closed activities.  \nIf includeCostPriceInFinance is set to true, this property is required. Otherwise, it cannot be provided. \r\n\r\nOnly accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "costAccountOngoing": {
            "type": "integer",
            "description": "The account number to register costs for ongoing activities.  \nIf includeCostPriceInFinance is set to true, this property is required. Otherwise, it cannot be provided.  \nOnly accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "costAccountOngoingType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OngoingAccountType"
              }
            ],
            "description": "The type of account to be used for booking the revenue from ongoing activities: \n- 0: Debit \n- 1: Credit \r\n\r\nIf includeCostPriceInFinance is set to true, this property is required. Otherwise, it cannot be provided.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "costContraAccountOngoing": {
            "type": "integer",
            "description": "The contra account number to register costs for ongoing activities.  \nIf includeCostPriceInFinance is set to true, this property is required. Otherwise, it cannot be provided. \r\n\r\nOnly accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "includeSalesPriceInFinance": {
            "type": "boolean",
            "description": "Flag indicating if the activity revenue is to be included in accounting or not.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "salesAccountClosed": {
            "type": "integer",
            "description": "The account number to register revenue for closed activities.  \nIf includeSalesPriceInFinance is set to true, this property is required. Otherwise, it cannot be provided. \r\n\r\nOnly accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "salesAccountOngoing": {
            "type": "integer",
            "description": "The account number to register revenue for ongoing activities.  \nIf includeSalesPriceInFinance is set to true, this property is required. Otherwise, it cannot be provided. \r\n\r\nOnly accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "salesAccountOngoingType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OngoingAccountType"
              }
            ],
            "description": "The type of account to be used for revenue from ongoing activities: \n- 0: Debit \n- 1: Credit \r\n\r\nIf includeSalesPriceInFinance is set to true, this property is required. Otherwise, it cannot be provided.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "salesContraAccountOngoing": {
            "type": "integer",
            "description": "The contra account number to register revenue for ongoing activities.  \nIf includeSalesPriceInFinance is set to true, this property is required. Otherwise, it cannot be provided. \r\n\r\nOnly accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "objectVersion": {
            "type": "string",
            "description": "The object version, required for PUT requests to help ensure that updates made by others don’t get overwritten by your update request.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "Id": 1,
          "Description": "An awesome activity group"
        }
      },
      "ActivityGroupCursorResults": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityGroup"
            },
            "description": "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cursor": {
            "type": "string",
            "description": "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "description": "Array of objects along with a cursor. Max number in the array returned is 1000",
        "example": {
          "cursor": "234",
          "items": [
            {
              "id": "13",
              "name": "Patrick"
            },
            {
              "id": "16",
              "name": "John"
            }
          ]
        }
      },
      "ActivityGroupType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "CostGroupType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "CostType": {
        "required": [
          "costGroupNumber",
          "name",
          "number"
        ],
        "type": "object",
        "properties": {
          "number": {
            "maximum": 999999999,
            "minimum": 1,
            "type": "integer",
            "description": "The unique number of the cost type.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The name of the cost type.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: true</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin, like",
            "x-sortable": true
          },
          "costGroupNumber": {
            "type": "integer",
            "description": "The number of the cost type group that the cost type belongs to.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "not filterable",
            "x-sortable": true
          },
          "vatCode": {
            "type": "string",
            "description": "The code for the Vat that's going to be applied to expenses.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: true</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": true
          },
          "isBarred": {
            "type": "boolean",
            "description": "Flag indicating if the cost type can be used to create expenses or not.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "lastUpdated": {
            "type": "string",
            "description": "The date when the cost type was last updated.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "format": "date-time",
            "readOnly": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "objectVersion": {
            "type": "string",
            "description": "The object version, required for PUT requests to help ensure that updates made by others don’t get overwritten by your update request.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "Id": 1,
          "Description": "An awesome cost type"
        }
      },
      "CostTypeCursorResults": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CostType"
            },
            "description": "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cursor": {
            "type": "string",
            "description": "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "description": "Array of objects along with a cursor. Max number in the array returned is 1000",
        "example": {
          "cursor": "234",
          "items": [
            {
              "id": "13",
              "name": "Patrick"
            },
            {
              "id": "16",
              "name": "John"
            }
          ]
        }
      },
      "CostTypeGroup": {
        "required": [
          "accountClosed",
          "accountOnGoing",
          "name",
          "number",
          "type"
        ],
        "type": "object",
        "properties": {
          "number": {
            "maximum": 999999999,
            "minimum": 1,
            "type": "integer",
            "description": "The unique number of the cost type group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The name of the cost type group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: true</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin, like",
            "x-sortable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CostGroupType"
              }
            ],
            "description": "The cost group type determines whether customers can be invoiced for expenses or not.  \nOnly expenses with cost prices associated with an invoiceable cost group are billable.  \nCost group types: \n- 1: Invoiceable \n- 2: Non-invoiceable  \n<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "markup": {
            "type": "number",
            "description": "The difference in percentage between the sales price and the cost price.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: true</p>",
            "format": "double",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": true
          },
          "accountOnGoing": {
            "type": "integer",
            "description": "The account number to register ongoing costs.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "not filterable",
            "x-sortable": true
          },
          "accountClosed": {
            "type": "integer",
            "description": "The account number to register costs for closed projects.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "not filterable",
            "x-sortable": true
          },
          "objectVersion": {
            "type": "string",
            "description": "The object version, required for PUT requests to help ensure that updates made by others don’t get overwritten by your update request.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "Id": 1,
          "Description": "An awesome cost type group"
        }
      },
      "CostTypeGroupCursorResults": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CostTypeGroup"
            },
            "description": "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cursor": {
            "type": "string",
            "description": "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "description": "Array of objects along with a cursor. Max number in the array returned is 1000",
        "example": {
          "cursor": "234",
          "items": [
            {
              "id": "13",
              "name": "Patrick"
            },
            {
              "id": "16",
              "name": "John"
            }
          ]
        }
      },
      "CreatedResult": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "The identifier of the newly created entity<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false
      },
      "Employee": {
        "required": [
          "access",
          "canApprove",
          "canInvoice",
          "groupNumber",
          "name",
          "number"
        ],
        "type": "object",
        "properties": {
          "number": {
            "maximum": 999999,
            "minimum": 0,
            "type": "integer",
            "description": "The unique number of the employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "groupNumber": {
            "type": "integer",
            "description": "The number of the employee group that the employee belongs to.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The name of the employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin, like",
            "x-sortable": false
          },
          "access": {
            "type": "boolean",
            "description": "Flag indicating if the employee can be registered on or is barred.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "phone": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The phone number of the employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "email": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The email address of the employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "objectVersion": {
            "type": "string",
            "description": "The object version, required for PUT requests to help ensure that updates made by others don’t get overwritten by your update request.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "Id": 1,
          "Description": "An awesome employee"
        }
      },
      "EmployeeCursorResults": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Employee"
            },
            "description": "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cursor": {
            "type": "string",
            "description": "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "description": "Array of objects along with a cursor. Max number in the array returned is 1000",
        "example": {
          "cursor": "234",
          "items": [
            {
              "id": "13",
              "name": "Patrick"
            },
            {
              "id": "16",
              "name": "John"
            }
          ]
        }
      },
      "EmployeeGroup": {
        "required": [
          "name",
          "number"
        ],
        "type": "object",
        "properties": {
          "number": {
            "maximum": 999999999,
            "minimum": 1,
            "type": "integer",
            "description": "The unique number of the employee group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The name of the employee group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin, like",
            "x-sortable": false
          },
          "objectVersion": {
            "type": "string",
            "description": "The object version, required for PUT requests to help ensure that updates made by others don’t get overwritten by your update request.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "Id": 1,
          "Description": "An awesome employee group"
        }
      },
      "EmployeeGroupCursorResults": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeGroup"
            },
            "description": "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cursor": {
            "type": "string",
            "description": "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "description": "Array of objects along with a cursor. Max number in the array returned is 1000",
        "example": {
          "cursor": "234",
          "items": [
            {
              "id": "13",
              "name": "Patrick"
            },
            {
              "id": "16",
              "name": "John"
            }
          ]
        }
      },
      "EmployeeType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Short description about the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "developerHint": {
            "type": "string",
            "description": "Some hints for the developer that might help avoid the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "logId": {
            "type": "string",
            "description": "The unique log identifier of the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "logTimeUtc": {
            "type": "string",
            "description": "The UTC time of the error being logged.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "property": {
            "type": "string",
            "description": "The property name in case of validation logic issue.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "errorCode": {
            "type": "string",
            "description": "The error code.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false
      },
      "Mileage": {
        "required": [
          "date",
          "distance",
          "employeeNumber",
          "projectNumber"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "The unique number of the project mileage entry.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "readOnly": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "projectNumber": {
            "type": "integer",
            "description": "The number of the project that the mileage entry is to be registered on.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "employeeNumber": {
            "type": "integer",
            "description": "The number of the employee that the mileage entry is to be registered for.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "date": {
            "type": "string",
            "description": "The date of the travel for which the mileage entry is created.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "format": "date-time",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "distance": {
            "type": "number",
            "description": "The distance of the travel for which the mileage entry is created.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "format": "double",
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "from": {
            "type": "string",
            "description": "The starting place of the travel for which the mileage entry is created.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "to": {
            "type": "string",
            "description": "The destination of the travel for which the mileage entry is created.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "isApproved": {
            "type": "boolean",
            "description": "Flag indicating if the mileage entry has been approved or not. If it has been approved, it cannot be updated anymore.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "readOnly": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "includeApprove": {
            "type": "boolean",
            "description": "By default it is true, so a user with rights will be able to approve. \r\n\t\t\t\t\tOnce it is approved, the field becomes false and it will be impossible to approve ever again.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "readOnly": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "objectVersion": {
            "type": "string",
            "description": "The object version, required for PUT requests to help ensure that updates made by others don’t get overwritten by your update request.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "Id": 1,
          "Description": "An awesome mileage"
        }
      },
      "MileageCursorResults": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mileage"
            },
            "description": "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cursor": {
            "type": "string",
            "description": "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "description": "Array of objects along with a cursor. Max number in the array returned is 1000",
        "example": {
          "cursor": "234",
          "items": [
            {
              "id": "13",
              "name": "Patrick"
            },
            {
              "id": "16",
              "name": "John"
            }
          ]
        }
      },
      "MileageNumbersCollection": {
        "required": [
          "numbers"
        ],
        "type": "object",
        "properties": {
          "numbers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The numbers of the mileage entries that are to be approved.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "numbers": [
            1,
            2,
            3
          ]
        }
      },
      "MileagePrices": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "The mileage entry unique identifier.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "costPrice": {
            "type": "number",
            "description": "The total cost of the travel, calculated as follows: CostPrice = CostRate x distance.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "format": "double",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "costRate": {
            "type": "number",
            "description": "The cost price per mile of travel, provided by the mileage setup.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "format": "double",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "salesPrice": {
            "type": "number",
            "description": "The total sales price of the travel, calculated as follows: SalesPrice = SalesRate x distance.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "format": "double",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "salesRate": {
            "type": "number",
            "description": "The sales price per mile of travel, provided by the mileage setup.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "format": "double",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "Id": 1,
          "Description": "An awesome mileage price"
        }
      },
      "MileagePricesCursorResults": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MileagePrices"
            },
            "description": "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cursor": {
            "type": "string",
            "description": "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "description": "Array of objects along with a cursor. Max number in the array returned is 1000",
        "example": {
          "cursor": "234",
          "items": [
            {
              "id": "13",
              "name": "Patrick"
            },
            {
              "id": "16",
              "name": "John"
            }
          ]
        }
      },
      "OngoingAccountType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "Project": {
        "required": [
          "name",
          "projectGroupNumber"
        ],
        "type": "object",
        "properties": {
          "number": {
            "maximum": 999999999,
            "minimum": 0,
            "type": "integer",
            "description": "The unique number of the project. If it's not provided in the POST requests, it is auto-generated.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The name of the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin, like",
            "x-sortable": false
          },
          "projectGroupNumber": {
            "type": "integer",
            "description": "The number of the project group that the project belongs to.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "customerNumber": {
            "maximum": 999999999,
            "minimum": 1,
            "type": "integer",
            "description": "The number of the customer that the project is assigned to.  \nIt is required if the project belongs to an external project group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "isClosed": {
            "type": "boolean",
            "description": "Flag indicating if the project has been closed or not. Closed project don't accept new entries.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "readOnly": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "mileage": {
            "type": "number",
            "description": "The default amount of mileage for the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "double",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "isBarred": {
            "type": "boolean",
            "description": "Flag indicating if the project has been barred or not. Barred projects don't accept new entries.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "isMainProject": {
            "type": "boolean",
            "description": "Flag indicating if a project is a main project or a sub-project. Main projects are grouping of projects and can't have entries (time entries, mileage entries, expenses), only sub-projects can.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "isMileageInvoiced": {
            "type": "boolean",
            "description": "Flag indicating if mileage should be included on sales invoices.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "lastUpdated": {
            "type": "string",
            "description": "The date and time when the project was last updated. Use it in the filter to retrieve only updated projects.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "responsibleEmployeeNumber": {
            "type": "integer",
            "description": "The number of the employee that is responsible for the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "mainProjectNumber": {
            "type": "integer",
            "description": "The number of the main project that the sub-project is linked to.  \nIt can be null - sub-projects can be standalone projects, they are not necessarily linked to a main project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "otherResponsibleEmployeeNumber": {
            "type": "integer",
            "description": "The number of the second employee that is responsible for the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "status": {
            "type": "integer",
            "description": "The status of a project. Project status is a separate manageable resource.  \nIt has 2 types: \n- 1: Quote sent \n- 2: Realised \r\n<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "description": {
            "maxLength": 2500,
            "minLength": 0,
            "type": "string",
            "description": "Text describing the project.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "deliveryDate": {
            "type": "string",
            "description": "The date when the project is to be delivered.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "format": "date-time",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "departmentNumber": {
            "type": "integer",
            "description": "The number of the department that the project is assigned to.  \nIt requires the Dimension module to be installed.  \nYou can find out if you have the Dimension module by calling this endpoint: https://restdocs.e-conomic.com/#self<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "closedDate": {
            "type": "string",
            "description": "The date when the project was closed and booked.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "format": "date-time",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "fixedPrice": {
            "type": "number",
            "description": "Fixed price agreed upon with a customer. It is not retrieved when invoicing, so it is only used for reporting.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "double",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "costPrice": {
            "type": "number",
            "description": "The total cost price of all registrations (time entires, mileage entries and expenses) on the project<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "double",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "salesPrice": {
            "type": "number",
            "description": "The total sales price of all registrations (time entires, mileage entries and expenses) on the project.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "double",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "invoicedTotal": {
            "type": "number",
            "description": "The total amount that was invoiced for all registrations (time entires, mileage entries and expenses) on the project<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "double",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "contactPersonId": {
            "type": "integer",
            "description": "The number of the customer contact that is to be used as a reference.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "deliveryLocationNumber": {
            "type": "integer",
            "description": "The number of the customer delivery location to be used for the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "otherReference": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "A text field that can be used to save any custom reference on the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "objectVersion": {
            "type": "string",
            "description": "The object version, required for PUT requests to help ensure that updates made by others don’t get overwritten by your update request.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "Id": 1,
          "Description": "An awesome project"
        }
      },
      "ProjectActivity": {
        "required": [
          "activityNumber",
          "projectNumber"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "The system unique number of the project activity entry. This property is not visible in the UI.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "projectNumber": {
            "type": "integer",
            "description": "The number of the project that the activity is linked to.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "activityNumber": {
            "type": "integer",
            "description": "The number of the activity that is linked to the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "startDate": {
            "type": "string",
            "description": "The date when time registration on the project activity starts being allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "format": "date-time",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "endDate": {
            "type": "string",
            "description": "The date when time registration on the project activity stops being allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "format": "date-time",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "responsibleEmployeeNumber": {
            "type": "integer",
            "description": "The number of the employee that is responsible for the project activity.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "completed": {
            "type": "boolean",
            "description": "Flag indicating if a project activity is still ongoing or if it's completed. Time registration on completed activities is not possible.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "objectVersion": {
            "type": "string",
            "description": "The object version, required for PUT requests to help ensure that updates made by others don’t get overwritten by your update request.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "lastUpdated": {
            "type": "string",
            "description": "The date and time when the project activity entry was last updated. Use it in the filter to retrieve only updated entries.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "Id": 1,
          "Description": "An awesome project activity"
        }
      },
      "ProjectActivityCursorResults": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectActivity"
            },
            "description": "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cursor": {
            "type": "string",
            "description": "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "description": "Array of objects along with a cursor. Max number in the array returned is 1000",
        "example": {
          "cursor": "234",
          "items": [
            {
              "id": "13",
              "name": "Patrick"
            },
            {
              "id": "16",
              "name": "John"
            }
          ]
        }
      },
      "ProjectCursorResults": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            },
            "description": "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cursor": {
            "type": "string",
            "description": "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "description": "Array of objects along with a cursor. Max number in the array returned is 1000",
        "example": {
          "cursor": "234",
          "items": [
            {
              "id": "13",
              "name": "Patrick"
            },
            {
              "id": "16",
              "name": "John"
            }
          ]
        }
      },
      "ProjectCustomer": {
        "required": [
          "name",
          "number"
        ],
        "type": "object",
        "properties": {
          "number": {
            "maximum": 999999999,
            "minimum": 1,
            "type": "integer",
            "description": "The unique number of the customer.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of the customer.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: true</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin, like",
            "x-sortable": true
          },
          "objectVersion": {
            "type": "string",
            "description": "The object version, required for PUT requests to help ensure that updates made by others don’t get overwritten by your update request.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "Id": 1,
          "Description": "An awesome customer"
        }
      },
      "ProjectCustomerCursorResults": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectCustomer"
            },
            "description": "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cursor": {
            "type": "string",
            "description": "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "description": "Array of objects along with a cursor. Max number in the array returned is 1000",
        "example": {
          "cursor": "234",
          "items": [
            {
              "id": "13",
              "name": "Patrick"
            },
            {
              "id": "16",
              "name": "John"
            }
          ]
        }
      },
      "ProjectEmployee": {
        "required": [
          "canApprove",
          "canInvoice",
          "groupNumber",
          "isBarred",
          "name",
          "number"
        ],
        "type": "object",
        "properties": {
          "number": {
            "maximum": 999999,
            "minimum": 1,
            "type": "integer",
            "description": "The unique number of the project employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "groupNumber": {
            "type": "integer",
            "description": "The number of the employee group that the employee belongs to.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The name of the employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin, like",
            "x-sortable": false
          },
          "isUser": {
            "type": "boolean",
            "description": "Flag indicating if the employee is also a user.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "readOnly": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "userId": {
            "type": "string",
            "description": "The id of the user that the employee is linked to. It is null if the employee is not linked to any user.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "canApprove": {
            "type": "boolean",
            "description": "Flag indicating if the employee can approve entries on a project.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "employeeType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeType"
              }
            ],
            "description": "Employee types: \n- 0: Not a user in e-conomic \n- 1: Time Logger \n- 2: Project Manager \n- 3: Mobile Time Logger<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne</p><p class='sort'>Sortable: false</p>",
            "readOnly": true,
            "x-filterable": "eq, ne",
            "x-sortable": false
          },
          "canInvoice": {
            "type": "boolean",
            "description": "Flag indicating if the employee can take mileage or time entries to the invoice process.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "isBarred": {
            "type": "boolean",
            "description": "Flag indicating if the employee can be registered on or is barred.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "address": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The address of the employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "city": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The city of residence of the employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "zipCode": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The employee's zip code.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "cutOffDate": {
            "type": "string",
            "description": "The date when the costPriceBefore and salesPriceBefore stop having effect and get replaced with costPriceAfter and salesPriceAfter. It can be null if only salesPriceBefore should apply.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: true</p>",
            "format": "date",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": true
          },
          "salesPriceBefore": {
            "type": "number",
            "description": "The sales price that is to be applied until the CutOffDate.  \nThe employee sales price determines the sales price of a time entry, provided that there is no price set on the activity specified on the time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "double",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "salesPriceAfter": {
            "type": "number",
            "description": "The sales price that is to be applied after the CutOffDate.  \nThe employee sales price determines the sales price of a time entry, provided that there is no price set on the activity specified on the time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "double",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "costPriceBefore": {
            "type": "number",
            "description": "The cost price that is to be applied until the CutOffDate.  \nThe employee cost price determines the cost price of a time entry, which can be adjusted with the CostPriceMarkupPercentage set on the activity specified on the time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "double",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "costPriceAfter": {
            "type": "number",
            "description": "The cost price that is to be applied after the CutOffDate.  \nThe employee cost price determines the cost price of a time entry, which can be adjusted with the CostPriceMarkupPercentage set on the activity specified on the time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "double",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "objectVersion": {
            "type": "string",
            "description": "The object version, required for PUT requests to help ensure that updates made by others don’t get overwritten by your update request.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "Id": 1,
          "Description": "An awesome project employee"
        }
      },
      "ProjectEmployeeCursorResults": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectEmployee"
            },
            "description": "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cursor": {
            "type": "string",
            "description": "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "description": "Array of objects along with a cursor. Max number in the array returned is 1000",
        "example": {
          "cursor": "234",
          "items": [
            {
              "id": "13",
              "name": "Patrick"
            },
            {
              "id": "16",
              "name": "John"
            }
          ]
        }
      },
      "ProjectEmployeeGroup": {
        "required": [
          "name",
          "number"
        ],
        "type": "object",
        "properties": {
          "number": {
            "maximum": 999999999,
            "minimum": 1,
            "type": "integer",
            "description": "The unique number of the employee group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The name of the employee group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin, like",
            "x-sortable": false
          },
          "objectVersion": {
            "type": "string",
            "description": "The object version, required for PUT requests to help ensure that updates made by others don’t get overwritten by your update request.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "Id": 1,
          "Description": "An awesome employee group"
        }
      },
      "ProjectEmployeeGroupCursorResults": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectEmployeeGroup"
            },
            "description": "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cursor": {
            "type": "string",
            "description": "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "description": "Array of objects along with a cursor. Max number in the array returned is 1000",
        "example": {
          "cursor": "234",
          "items": [
            {
              "id": "13",
              "name": "Patrick"
            },
            {
              "id": "16",
              "name": "John"
            }
          ]
        }
      },
      "ProjectGroup": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "The unique number of the project group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The name of the project group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin, like",
            "x-sortable": false
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectGroupType"
              }
            ],
            "description": "The project group type determines whether a customer can be invoiced for the costs (time entries, mileage entries, expenses) registered on a project or not.  \nOnly projects that are part of an external, invoiceable group support billable costs.  \nProject group types are: \n- 1: Internal \n- 2: External, invoiceable \n- 3: External non-invoiceable  \r\n<p class='filter'>Filterable: eq, ne</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne",
            "x-sortable": false
          },
          "includeCostPriceInFinance": {
            "type": "boolean",
            "description": "Flag indicating if project costs are to be included in accounting or not.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "costAccountOngoingType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OngoingAccountType"
              }
            ],
            "description": "The type of account to be used for booking the revenue from ongoing projects: \n- 0: Debit \n- 1: Credit \r\n\r\nIf includeCostPriceInFinance is set to true, this property is required. Otherwise, it cannot be provided.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "costAccountOngoing": {
            "type": "integer",
            "description": "The account number to register costs for ongoing projects.  \nIf includeCostPriceInFinance is set to true, this property is required. Otherwise, it cannot be provided. \r\n\r\nOnly accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "costContraAccountOngoing": {
            "type": "integer",
            "description": "The contra account number to register costs for ongoing projects.  \nIf includeCostPriceInFinance is set to true, this property is required. Otherwise, it cannot be provided. \r\n\r\nOnly accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "costAccountClosed": {
            "type": "integer",
            "description": "The account number to register costs for closed projects.  \nIf includeCostPriceInFinance is set to true, this property is required. Otherwise, it cannot be provided. \r\n\r\nOnly accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "includeSalesPriceInFinance": {
            "type": "boolean",
            "description": "Flag indicating if the project revenue is to be included in accounting or not.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "salesAccountOngoingType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OngoingAccountType"
              }
            ],
            "description": "The type of account to be used for revenue from ongoing projects: \n- 0: Debit \n- 1: Credit \r\n\r\nIf includeSalesPriceInFinance is set to true, this property is required. Otherwise, it cannot be provided.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "salesAccountOngoing": {
            "type": "integer",
            "description": "The account number to register revenue for ongoing projects.  \nIf includeSalesPriceInFinance is set to true, this property is required. Otherwise, it cannot be provided. \r\n\r\nOnly accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "salesContraAccountOngoing": {
            "type": "integer",
            "description": "The contra account number to register revenue for ongoing projects.  \nIf includeSalesPriceInFinance is set to true, this property is required. Otherwise, it cannot be provided. \r\n\r\nOnly accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "salesAccountClosed": {
            "type": "integer",
            "description": "The account number to register revenue for closed projects. \r\nIf includeSalesPriceInFinance is set to true, this property is required. Otherwise, it cannot be provided. \r\n\r\nOnly accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "objectVersion": {
            "type": "string",
            "description": "The object version, required for PUT requests to help ensure that updates made by others don’t get overwritten by your update request.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "Id": 1,
          "Description": "An awesome projectGroup"
        }
      },
      "ProjectGroupCursorResults": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectGroup"
            },
            "description": "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cursor": {
            "type": "string",
            "description": "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "description": "Array of objects along with a cursor. Max number in the array returned is 1000",
        "example": {
          "cursor": "234",
          "items": [
            {
              "id": "13",
              "name": "Patrick"
            },
            {
              "id": "16",
              "name": "John"
            }
          ]
        }
      },
      "ProjectGroupType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "ProjectStatus": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "The unique number of the project status.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the project status.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin, like",
            "x-sortable": false
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectStatusType"
              }
            ],
            "description": "Project status types: \n- 1: Quote sent \n- 2: Realised \r\n<p class='filter'>Filterable: eq, ne</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "eq, ne",
            "x-sortable": false
          },
          "priority": {
            "type": "integer",
            "description": "A number that defines the priority of a project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "objectVersion": {
            "type": "string",
            "description": "The object version, required for PUT requests to help ensure that updates made by others don’t get overwritten by your update request.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "Id": 1,
          "Description": "An awesome projectStatus"
        }
      },
      "ProjectStatusCursorResults": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectStatus"
            },
            "description": "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cursor": {
            "type": "string",
            "description": "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "description": "Array of objects along with a cursor. Max number in the array returned is 1000",
        "example": {
          "cursor": "234",
          "items": [
            {
              "id": "13",
              "name": "Patrick"
            },
            {
              "id": "16",
              "name": "John"
            }
          ]
        }
      },
      "ProjectStatusType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "TimeEntry": {
        "required": [
          "activityNumber",
          "date",
          "employeeNumber",
          "projectNumber"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "The time entry unique identifier.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "projectNumber": {
            "type": "integer",
            "description": "The number of the project that the time entry is to be registered on.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "activityNumber": {
            "type": "integer",
            "description": "The number of the activity that the time entry is to be registered on.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "employeeNumber": {
            "type": "integer",
            "description": "The number of the employee that the time entry is to be registered for.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "date": {
            "type": "string",
            "description": "The date for which the time entry is registered.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "format": "date-time",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "text": {
            "type": "string",
            "description": "Text description that can be used to add extra information related to the time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin, like",
            "x-sortable": false
          },
          "numberOfHours": {
            "type": "number",
            "description": "The number of hours reported in a time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "double",
            "nullable": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "isApproved": {
            "type": "boolean",
            "description": "Flag indicating if the time entry has been approved or not. If it has been approved, it cannot be updated anymore.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "readOnly": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "isReconciled": {
            "type": "boolean",
            "description": "Flag indicating if the time entry has been reconciled or not.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "lastUpdated": {
            "type": "string",
            "description": "The date when the time entry was last updated.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "format": "date-time",
            "readOnly": true,
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "objectVersion": {
            "type": "string",
            "description": "The object version, required for PUT requests to help ensure that updates made by others don’t get overwritten by your update request.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "Id": 1,
          "Description": "An awesome time entry"
        }
      },
      "TimeEntryCursorResults": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeEntry"
            },
            "description": "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cursor": {
            "type": "string",
            "description": "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "description": "Array of objects along with a cursor. Max number in the array returned is 1000",
        "example": {
          "cursor": "234",
          "items": [
            {
              "id": "13",
              "name": "Patrick"
            },
            {
              "id": "16",
              "name": "John"
            }
          ]
        }
      },
      "TimeEntryNumbersCollection": {
        "required": [
          "numbers"
        ],
        "type": "object",
        "properties": {
          "numbers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The numbers of the time entries to be approved.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "numbers": [
            1,
            2,
            3
          ]
        }
      },
      "TimeEntryPrices": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "The time entry unique identifier.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "costPrice": {
            "type": "number",
            "description": "The cost price of the time entry, calculated as follows:  \nCostPrice = (employee costPrice + activity costPriceMarkupPercentage) x time entry numberOfHours.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "format": "double",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "salesPrice": {
            "type": "number",
            "description": "The sales price of the time entry, calculated as follows:  \nSalesPrice = activity salesPrice x time entry numberOfHours.  \nIf there is no sales price set on the activity, then SalesPrice = employee salesPrice x time entry numberOfHours.  \nIf there is any special price set on the project, it supersedes the price set on the activity or on the employee.  \nSales prices are only calculated for invoiceable projects and activities. Sales price for non-invoiceable projects or activities = 0<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "format": "double",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "Id": 1,
          "Description": "An awesome time entry price"
        }
      },
      "TimeEntryPricesCursorResults": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeEntryPrices"
            },
            "description": "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "cursor": {
            "type": "string",
            "description": "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "x-filterable": "not filterable",
            "x-sortable": false
          }
        },
        "additionalProperties": false,
        "description": "Array of objects along with a cursor. Max number in the array returned is 1000",
        "example": {
          "cursor": "234",
          "items": [
            {
              "id": "13",
              "name": "Patrick"
            },
            {
              "id": "16",
              "name": "John"
            }
          ]
        }
      }
    },
    "securitySchemes": {
      "X-AppSecretToken": {
        "type": "apiKey",
        "description": "Application secret token needed to access the endpoints.",
        "name": "X-AppSecretToken",
        "in": "header"
      },
      "X-AgreementGrantToken": {
        "type": "apiKey",
        "description": "Agreement grant token needed to access the endpoints.",
        "name": "X-AgreementGrantToken",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "X-AppSecretToken": [],
      "X-AgreementGrantToken": []
    }
  ],
  "tags": [
    {
      "name": "Projects",
      "description": "<code>Projects</code> are indispensable within the Projects module, as any registration needs to be linked to a project.\r\nProjects are either:\r\n* Sub-projects or\r\n* Main projects\r\n\r\nSub-projects can be linked to a main project or used independently.\r\n\r\nBoth kinds of projects can be invoiced, but expenses, time entries and mileages can only be registered on sub-projects.\r\n\r\nMain projects are primarily used to group sub-projects.\r\n\r\nExternal projects are assigned a customer number, which means that the registration on projects can have an effect on accounting.\r\n\r\n\r\n#### Examples of use cases:\r\n\r\n* Create new projects;\r\n* Retrieve all projects which need to be delivered by a given date;\r\n\r\n\r\nRelated guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-projekt) (Danish)\r\n<details>\n<summary><b>Click to see the list of possible error codes.</b></summary>\n\n| Error Code | Description |\n| ---------- | ----------- |\n|ProjectCannotBeCreatedUpdatedNumberIsInvalid|Project cannot be created or updated since the given number is invalid.\n|ProjectCannotBeCreatedUpdatedGroupNumberIsInvalid|Project cannot be created or updated since the given group number is invalid.\n|ProjectCannotBeCreatedUpdatedNumberAlreadyExists|Project cannot be created or updated since the given number already exists.\n|ProjectCannotBeCreatedAsClosed|Project cannot be created as closed.\n|ProjectCannotBeCreatedUpdatedGroupDoesNotExist|Project cannot be created or updated since the given project group does not exist.\n|ProjectCannotBeCreatedUpdatedCustomerNumberRequired|Project cannot be created or updated since customer number is required.\n|ProjectCannotBeCreatedUpdatedMainProjectNumberCannotBeSet|Project cannot be created or updated, main project number can only be set when creating subprojects.\n|ProjectCannotBeCreatedUpdatedMainProjectNumberDoesNotExistOrInvalid|Project cannot be created or updated, provided main project number doesn't exist or is not a main project.\n|ProjectCannotBeCreatedUpdatedInvalidCustomerNumber|Project cannot be created or updated, customer number is invalid.\n|ProjectCannotBeCreatedUpdatedCustomerNotFound|Project cannot be created or updated, customer was not found.\n|ProjectCannotBeMadeMainHasTimeEntries|Project cannot be made main project, it has time entries.\n|ProjectCannotBeMadeMainHasMileageEntries|Project cannot be made main project, it has mileage entries.\n|ProjectCannotBeMadeSubprojectHasSubProjects|Project cannot be made subproject, it already has subprojects.\n|ProjectCannotBeDeletedHasSubProjects|Project cannot be deleted since it has subprojects.\n|ProjectCannotBeDeletedHasTimeEntries|Project cannot be deleted since it has time entries.\n|ProjectCannotBeDeletedHasDraftEntries|Project cannot be deleted since it has draft daybook entries.\n|ProjectCannotBeDeletedHasBookedEntries|Project cannot be deleted since it has booked daybook entries.\n|ProjectCannotBeDeletedHasInvoices|Project cannot be deleted since it has invoices.\n|ProjectCannotBeDeletedHasSalesDocuments|Project cannot be deleted since it has sales documents.\n|ProjectCannotBeDeletedHasExpenses|Project cannot be deleted since it has expenses.\n|ProjectCannotBeDeletedHasMileages|Project cannot be deleted since it has mileage entries.\n</details>\n\n**Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n",
      "x-error-codes": [
        "ProjectCannotBeCreatedUpdatedNumberIsInvalid",
        "ProjectCannotBeCreatedUpdatedGroupNumberIsInvalid",
        "ProjectCannotBeCreatedUpdatedNumberAlreadyExists",
        "ProjectCannotBeCreatedAsClosed",
        "ProjectCannotBeCreatedUpdatedGroupDoesNotExist",
        "ProjectCannotBeCreatedUpdatedCustomerNumberRequired",
        "ProjectCannotBeCreatedUpdatedMainProjectNumberCannotBeSet",
        "ProjectCannotBeCreatedUpdatedMainProjectNumberDoesNotExistOrInvalid",
        "ProjectCannotBeCreatedUpdatedInvalidCustomerNumber",
        "ProjectCannotBeCreatedUpdatedCustomerNotFound",
        "ProjectCannotBeMadeMainHasTimeEntries",
        "ProjectCannotBeMadeMainHasMileageEntries",
        "ProjectCannotBeMadeSubprojectHasSubProjects",
        "ProjectCannotBeDeletedHasSubProjects",
        "ProjectCannotBeDeletedHasTimeEntries",
        "ProjectCannotBeDeletedHasDraftEntries",
        "ProjectCannotBeDeletedHasBookedEntries",
        "ProjectCannotBeDeletedHasInvoices",
        "ProjectCannotBeDeletedHasSalesDocuments",
        "ProjectCannotBeDeletedHasExpenses",
        "ProjectCannotBeDeletedHasMileages"
      ],
      "x-required-roles": [
        "ProjectEmployee",
        "SuperUser"
      ]
    },
    {
      "name": "Project Statuses",
      "description": "<code>Project Statuses</code> help distinguish between two types of statuses:\r\n* Quote sent\r\n* Realised\r\n\r\nHowever, having a status is not mandatory, so there may be projects without one.\r\n\r\n#### Examples of use cases:\r\n\r\n- Retrieve all projects which have the status set to Realised.\r\n\r\n\r\nRelated guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-projektstatus) (Danish)\r\n\n**Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n",
      "x-required-roles": [
        "ProjectEmployee",
        "SuperUser"
      ]
    },
    {
      "name": "Project Groups",
      "description": "<code>Project Groups</code> allow projects to be classified as:\r\n\r\n- Internal\r\n- External, invoiceable or\r\n- External, non-invoiceable\r\n\r\nInternal projects are only for internal use, whereas external projects are for other companies and therefore need to be assigned a customer.\r\n\r\nThe distinction between invoiceable and non-invoiceable is whether the costs registered on a project are to be considered billable to the user's customer or not.\r\n\r\nAdditionally, project groups determine whether registrations on a project should have an impact on the financial accounting or not.\r\n\r\n\r\n#### Examples of use cases:\r\n\r\n* Retrieve all project groups;\r\n* Display the available project groups when creating a new project.\r\n\r\n\r\nRelated guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-en-projektgruppe) (Danish)<details>\n<summary><b>Click to see the list of possible error codes.</b></summary>\n\n| Error Code | Description |\n| ---------- | ----------- |\n|ProjectGroupCannotBeCreatedUpdatedNumberAlreadyExists|Project group cannot be created since the given number already exists.\n|ProjectGroupCannotBeCreatedUpdatedCostDataInvalid|Project group cannot be created or updated. If includeCostPriceInFinance is true, then costAccountOngoingType, costAccountOngoing, costContraAccountOngoing and costAccountClosed are required, otherwise they should be ommited.\n|ProjectGroupCannotBeCreatedUpdatedSalesDataInvalid|Project group cannot be created or updated. If includeSalesPriceInFinance is true, then salesAccountOngoingType, salesAccountOngoing, salesContraAccountOngoing and salesAccountClosed are required, otherwise they should be ommited.\n|ProjectGroupCannotBeCreatedUpdatedAccountDoesNotExist|Project group cannot be created or updated. The account does not exist.\n|ProjectGroupCannotBeCreatedUpdatedAccountIsBarred|Project group cannot be created or updated. The account is barred.\n|ProjectGroupCannotBeCreatedUpdatedAccountIsOfWrongType|Project group cannot be created or updated. The type of the account needs to be either `Balance` or `Profit & Loss`.\n</details>\n\n**Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n",
      "x-error-codes": [
        "ProjectGroupCannotBeCreatedUpdatedNumberAlreadyExists",
        "ProjectGroupCannotBeCreatedUpdatedCostDataInvalid",
        "ProjectGroupCannotBeCreatedUpdatedSalesDataInvalid",
        "ProjectGroupCannotBeCreatedUpdatedAccountDoesNotExist",
        "ProjectGroupCannotBeCreatedUpdatedAccountIsBarred",
        "ProjectGroupCannotBeCreatedUpdatedAccountIsOfWrongType"
      ],
      "x-required-roles": [
        "ProjectEmployee",
        "SuperUser"
      ]
    },
    {
      "name": "Time entries",
      "description": "<code>Time entries</code> endpoints allow for the registration of time spent working on a certain activity on a given project.<br>\r\nUntil they are approved, time entries are only considered drafts and can be edited or deleted.\r\n\r\n#### Examples of use cases:\r\n\r\n* Retrieve all time entries registered on a project;\r\n* Create new time entries;\r\n* Approve the time entries that meet all requirements (e.g. date is within a valid accounting year and there is no recording rule to prevent registration on the selected activity or project).\r\n\r\n\r\nRelated guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/tidsregistrering) (Danish)\r\n<details>\n<summary><b>Click to see the list of possible error codes.</b></summary>\n\n| Error Code | Description |\n| ---------- | ----------- |\n|TimeEntryIsApproved|Time entry is already approved.\n|TimeEntryOnBarredProjectCannotBeApproved|Time entry cannot be approved since the project has been barred.\n|CannotCreateUpdateActivityNotFound|Time entry cannot be created or updated since the provided activity was not found.\n|CannotCreateUpdateActivityIsBarred|Time entry cannot be created or updated since the provided activity is barred.\n|CannotCreateUpdateActivityNotPartOfProject|Time entry cannot be created or updated since the provided activity is not part of the provided project.\n|TimeEntryIsNotInAccountingPeriod|Time entry is not in a valid accounting period.\n|TimeEntryCannotBeCreatedUpdatedOrApprovedAccountingPeriodIsBarredOrClosed|Time entry cannot be created, updated or approved, it is in an accounting period that is either barred or closed.\n|TimeEntryCannotBeCreatedUpdatedOrApprovedAccountingPeriodIsClosed|Time entry cannot be created, updated or approved, it is in a closed accounting period.\n|TimeEntryCannotBeApprovedNotFound|Time entry cannot be approved since it was not found.\n|TimeEntryCannotBeUpdatedAlreadyApproved|Time entry cannot be updated or deleted since it is approved.\n|TimeEntryCannotBeCreatedUpdatedDateIsNotSet|Time entry cannot be created or updated, date must be set and be greater than minimum date.\n|TimeEntryNumberListCannotBeEmpty|List of time entries cannot be empty.\n|TimeEntryApprovalFailedBaseCurrencyIsNotSet|Time entry cannot be approved since the company base currency has not been set.\n|TimeEntryCannotBeCreatedUpdatedForCompletedActivity|Time entry cannot be created or updated since the activity is completed.\n|TimeEntryCannotBeCreatedUpdatedForActivityThatHasntStarted|Time entry cannot be created or updated since the activity has not started yet.\n|EmployeeHasNoAccessToProject|Employee has no access to the provided project.\n|EmployeeHasNoAccessToActivity|Employee has no access to the provided activity.\n|EntriesNotAllowedProjectNotFound|Entries not allowed on an inexistent project.\n|EntriesNotAllowedProjectIsMain|Entries not allowed on a main project.\n|EntriesNotAllowedProjectIsClosed|Entries not allowed on a closed project.\n|EntriesNotAllowedProjectIsBarred|Entries not allowed on a barred project.\n|EntriesNotAllowedEmployeeNotFound|Entries not allowed because the given employee was not found.\n|EntriesNotAllowedEmployeeIsBarred|Entries not allowed because the given employee is barred.\n|CannotBeApprovedEmployeeNotFound|Entry cannot be approved since employee was not found.\n|CannotBeApprovedEmployeeIsBarred|Entry cannot be approved since employee is barred.\n|CannotBeApprovedActivityNotFound|Entry cannot be approved since activity was not found.\n|CannotBeApprovedActivityIsBarred|Entry cannot be approved since activity is barred.\n|CannotBeApprovedForCompletedActivity|Entry cannot be approved since the activity is completed or hasn't started yet.\n|CannotBeApprovedActivityNotPartOfProject|Entry cannot be approved since the activity is not part of the project.\n</details>\n\n**Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n",
      "x-error-codes": [
        "TimeEntryIsApproved",
        "TimeEntryOnBarredProjectCannotBeApproved",
        "CannotCreateUpdateActivityNotFound",
        "CannotCreateUpdateActivityIsBarred",
        "CannotCreateUpdateActivityNotPartOfProject",
        "TimeEntryIsNotInAccountingPeriod",
        "TimeEntryCannotBeCreatedUpdatedOrApprovedAccountingPeriodIsBarredOrClosed",
        "TimeEntryCannotBeCreatedUpdatedOrApprovedAccountingPeriodIsClosed",
        "TimeEntryCannotBeApprovedNotFound",
        "TimeEntryCannotBeUpdatedAlreadyApproved",
        "TimeEntryCannotBeCreatedUpdatedDateIsNotSet",
        "TimeEntryNumberListCannotBeEmpty",
        "TimeEntryApprovalFailedBaseCurrencyIsNotSet",
        "TimeEntryCannotBeCreatedUpdatedForCompletedActivity",
        "TimeEntryCannotBeCreatedUpdatedForActivityThatHasntStarted",
        "EmployeeHasNoAccessToProject",
        "EmployeeHasNoAccessToActivity",
        "EntriesNotAllowedProjectNotFound",
        "EntriesNotAllowedProjectIsMain",
        "EntriesNotAllowedProjectIsClosed",
        "EntriesNotAllowedProjectIsBarred",
        "EntriesNotAllowedEmployeeNotFound",
        "EntriesNotAllowedEmployeeIsBarred",
        "CannotBeApprovedEmployeeNotFound",
        "CannotBeApprovedEmployeeIsBarred",
        "CannotBeApprovedActivityNotFound",
        "CannotBeApprovedActivityIsBarred",
        "CannotBeApprovedForCompletedActivity",
        "CannotBeApprovedActivityNotPartOfProject"
      ],
      "x-required-roles": [
        "ProjectEmployee",
        "SuperUser"
      ]
    },
    {
      "name": "Time entry prices",
      "description": "<code>Time entry prices</code> endpoints extend <code>Time entries</code> with prices.<br>\r\nA time entry cost or sales price is calculated by multiplying the activity cost or sales price respectively by the number of hours reported in the time entry.<br>\r\nIf no activity price is provided, the time entry cost/sales price equals the employee cost/sales price * the number of hours reported in the time entry.\r\n\r\n#### Examples of use cases:\r\n\r\n* Retrieve the cost and sales prices.\r\n\r\nRelated guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/tidsregistrering) (Danish)\r\n\n**Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n",
      "x-required-roles": [
        "ProjectEmployee",
        "SuperUser"
      ]
    },
    {
      "name": "Mileage entries",
      "description": "<code>Mileage entries</code> are the registration of project-related mileages by <code>Employees</code> on <code>Projects</code>.<br>\r\nUntil they are approved, mileages are only considered drafts and can be edited or deleted.\r\n\r\n\r\n#### Examples of use cases:\r\n\r\n* Create mileage entries;\r\n* Retrieve all mileages registered on a project;\r\n* Approve the mileages that meet all requirements (e.g. mileage date is within a valid accounting year and there is no recording rule to prevent registration on the selected project)\r\n\r\n\r\nRelated guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-ogeller-godkend-km-registrering) (Danish)\r\n<details>\n<summary><b>Click to see the list of possible error codes.</b></summary>\n\n| Error Code | Description |\n| ---------- | ----------- |\n|MileageIsNotFound|Mileage entry was not found.\n|MileageIsAlreadyApproved|Mileage entry is already approved.\n|MileageOnBarredProjectCannotBeApproved|Mileage entry cannot be approved since the project has been barred.\n|MileageCannotBeUpdatedAlreadyApproved|Mileage entry cannot be updated or deleted since it is approved.\n|MileageIsNotInAccountingPeriod|Mileage entry is not in a valid accounting period.\n|MileageAccountingPeriodIsBarredOrClosed|Mileage entry is in an invalid (closed or barred) accounting period.\n|MileageAccountingPeriodIsClosed|Mileage entry is in a closed accounting period.\n|MileageNumberListCannotBeEmpty|List of mileage entries cannot be empty.\n|MileageApprovalFailedBaseCurrencyIsNotSet|Mileage entry cannot be approved since the company base currency has not been set.\n|MileageCannotBeCreatedUpdatedDateIsNotSet|Mileage entry cannot be created or updated, date must be set and be greater than minimum date.\n|MileageCannotBeCreatedUpdatedDateIsNotInAccountingPeriod|Mileage entry cannot be created or updated, its date is not in an existing accounting period.\n|MileageCannotBeCreatedUpdatedDateIsInClosedBarredAccountingPeriod|Mileage entry cannot be created or updated, its date is in a closed or barred accounting period.\n|MileageSetupCannotBeCreatedUpdatedCostAccountNotExists|Mileage setup cannot be created or updated, cost account ongoing does not exist.\n|MileageSetupCannotBeCreatedUpdatedContraAccountNotExists|Mileage setup cannot be created or updated, contra account ongoing does not exist.\n|MileageSetupCannotBeCreatedUpdatedCostAccountClosedNotExists|Mileage setup cannot be created or updated, cost account closed does not exist.\n|EmployeeHasNoAccessToProject|Employee has no access to the provided project.\n|EmployeeHasNoAccessToActivity|Employee has no access to the provided activity.\n|EntriesNotAllowedProjectNotFound|Entries not allowed on an inexistent project.\n|EntriesNotAllowedProjectIsMain|Entries not allowed on a main project.\n|EntriesNotAllowedProjectIsClosed|Entries not allowed on a closed project.\n|EntriesNotAllowedProjectIsBarred|Entries not allowed on a barred project.\n|EntriesNotAllowedEmployeeNotFound|Entries not allowed because the given employee was not found.\n|EntriesNotAllowedEmployeeIsBarred|Entries not allowed because the given employee is barred.\n|CannotBeApprovedEmployeeNotFound|Entry cannot be approved since employee was not found.\n|CannotBeApprovedEmployeeIsBarred|Entry cannot be approved since employee is barred.\n|CannotBeApprovedActivityNotFound|Entry cannot be approved since activity was not found.\n|CannotBeApprovedActivityIsBarred|Entry cannot be approved since activity is barred.\n|CannotBeApprovedForCompletedActivity|Entry cannot be approved since the activity is completed or hasn't started yet.\n|CannotBeApprovedActivityNotPartOfProject|Entry cannot be approved since the activity is not part of the project.\n</details>\n\n**Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n",
      "x-error-codes": [
        "MileageIsNotFound",
        "MileageIsAlreadyApproved",
        "MileageOnBarredProjectCannotBeApproved",
        "MileageCannotBeUpdatedAlreadyApproved",
        "MileageIsNotInAccountingPeriod",
        "MileageAccountingPeriodIsBarredOrClosed",
        "MileageAccountingPeriodIsClosed",
        "MileageNumberListCannotBeEmpty",
        "MileageApprovalFailedBaseCurrencyIsNotSet",
        "MileageCannotBeCreatedUpdatedDateIsNotSet",
        "MileageCannotBeCreatedUpdatedDateIsNotInAccountingPeriod",
        "MileageCannotBeCreatedUpdatedDateIsInClosedBarredAccountingPeriod",
        "MileageSetupCannotBeCreatedUpdatedCostAccountNotExists",
        "MileageSetupCannotBeCreatedUpdatedContraAccountNotExists",
        "MileageSetupCannotBeCreatedUpdatedCostAccountClosedNotExists",
        "EmployeeHasNoAccessToProject",
        "EmployeeHasNoAccessToActivity",
        "EntriesNotAllowedProjectNotFound",
        "EntriesNotAllowedProjectIsMain",
        "EntriesNotAllowedProjectIsClosed",
        "EntriesNotAllowedProjectIsBarred",
        "EntriesNotAllowedEmployeeNotFound",
        "EntriesNotAllowedEmployeeIsBarred",
        "CannotBeApprovedEmployeeNotFound",
        "CannotBeApprovedEmployeeIsBarred",
        "CannotBeApprovedActivityNotFound",
        "CannotBeApprovedActivityIsBarred",
        "CannotBeApprovedForCompletedActivity",
        "CannotBeApprovedActivityNotPartOfProject"
      ],
      "x-required-roles": [
        "ProjectEmployee",
        "SuperUser"
      ]
    },
    {
      "name": "Mileage entry prices",
      "description": "<code>Mileage prices</code> endpoints extend <code>Mileages</code> with prices.<br>\r\nA mileage entry cost or sales price is calculated by multiplying the mileage cost or sales rate respectively by the number of kilometers.<br>\r\nThe mileage cost or sales rate is provided by the mileage setup.\r\n\r\n\r\n#### Examples of use cases:\r\n\r\n* Retrieve cost and sales prices and rates.\r\n\r\nRelated guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/medtag-kost-og-salgspriser-i-finans#section4) (Danish)\r\n\n**Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n",
      "x-required-roles": [
        "ProjectEmployee",
        "SuperUser"
      ]
    },
    {
      "name": "Project employees",
      "description": "<code>Project-employees</code> endpoints provide project-related information about employees.\r\n\r\nEmployees can also be users in the system, but only if they are created via the UI Projects/ Employees section and the employee type is not 0.<br>\r\nSometimes the employee type can be 0 even if IsUser is true, but only if an user is created via All Settings and then linked to an employee.\r\n\r\n\r\n#### Examples of use cases:\r\n\r\n* Retrieve all employees who have a certain name;\r\n* Display all those employees when registering a time entry.\r\n\r\n\r\nRelated guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-eller-tilknyt-en-medarbejder-til-bruger-i-projekt) (Danish)\r\n<details>\n<summary><b>Click to see the list of possible error codes.</b></summary>\n\n| Error Code | Description |\n| ---------- | ----------- |\n|EmployeeCannotBeCreatedUpdatedNumberAlreadyExists|Employee cannot be created since the given number already exists.\n|EmployeeCannotBeCreatedUpdatedGroupNotFound|Employee cannot be created or updated since the given employee group was not found.\n|EmployeeCannotBeCreatedUpdatedNameNullOrEmpty|Employee cannot be created or updated since employee name cannot be null or empty.\n|ERROR_BOUNDCOWORKERTHEREISNUMBEROFPOSTSONDRAFTS|Finance vouchers exist for the selected employee.\n|ERROR_BOUNDCOWORKERACCOUNTNUMBEROFTIMEREGISTERINGONCOWORKER|There is/are time entry(ies) for the selected employee.\n|ERROR_BOUNDCOWORKERACCOUNTNUMBEROFEXPENSEREGISTERINGONCOWORKER|There is/are expense entry(ies) for the selected employee.\n|ERROR_BOUNDCOWORKERACCOUNTNUMBEROFMILEAGEENTRIESONCOWORKER|There is/are milage entry(ies) for the selected employee.\n|ERROR_BOUNDCOWORKERACCOUNTCOWORKERRESPONSIBLENUMBEROFCASES|The employee is responsible for project(s).\n|ERROR_BOUNDCOWORKERACCOUNTCOWORKERISBOUNDEDTOUSERSACCESSOFTIMEREGISTERING|The employee is linked to a user's access to time recording.\n|ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFDEBITORS|The employee is a sales representative for customer(s).\n|ERROR_BOUNDCOWORKERACCOUNTCOWORKERISOURREFFORNUMBEROFCREDITORS|The employee is linked to supplier(s).\n|ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFINVOICES|The employee is a sales representative for invoice(s).\n|ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFDRAFTS|The employee is a sales representative for draft invoice(s).\n|ERROR_BOUNDCOWORKERACCOUNTCOWORKERISREFMANFORNUMBEROFPURCHASEORDERS|The employee is linked to purchase order(s).\n</details>\n\n**Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n",
      "x-error-codes": [
        "EmployeeCannotBeCreatedUpdatedNumberAlreadyExists",
        "EmployeeCannotBeCreatedUpdatedGroupNotFound",
        "EmployeeCannotBeCreatedUpdatedNameNullOrEmpty",
        "ERROR_BOUNDCOWORKERTHEREISNUMBEROFPOSTSONDRAFTS",
        "ERROR_BOUNDCOWORKERACCOUNTNUMBEROFTIMEREGISTERINGONCOWORKER",
        "ERROR_BOUNDCOWORKERACCOUNTNUMBEROFEXPENSEREGISTERINGONCOWORKER",
        "ERROR_BOUNDCOWORKERACCOUNTNUMBEROFMILEAGEENTRIESONCOWORKER",
        "ERROR_BOUNDCOWORKERACCOUNTCOWORKERRESPONSIBLENUMBEROFCASES",
        "ERROR_BOUNDCOWORKERACCOUNTCOWORKERISBOUNDEDTOUSERSACCESSOFTIMEREGISTERING",
        "ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFDEBITORS",
        "ERROR_BOUNDCOWORKERACCOUNTCOWORKERISOURREFFORNUMBEROFCREDITORS",
        "ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFINVOICES",
        "ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFDRAFTS",
        "ERROR_BOUNDCOWORKERACCOUNTCOWORKERISREFMANFORNUMBEROFPURCHASEORDERS"
      ],
      "x-required-roles": [
        "ProjectEmployee",
        "SuperUser"
      ]
    },
    {
      "name": "Project employee groups",
      "description": "<code>Project-employee Groups</code> help distinguish between various categories of employees.\r\n\r\nNote that <code>Employeegroups</code> and <code>Project-employeegroups</code> return the same data, the only difference between the two is that one requires access to the Sales module and the other one to the Projects module.\r\n\r\n#### Examples of use cases:\r\n\r\n* Retrieve all employee groups;\r\n* Display all employee groups when creating a new employee.\r\n\r\n\r\nRelated guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-medarbejdergruppe) (Danish)\r\n<details>\n<summary><b>Click to see the list of possible error codes.</b></summary>\n\n| Error Code | Description |\n| ---------- | ----------- |\n|EmployeeGroupNumberAlreadyExists|Employee group cannot be created since the given number already exists.\n|ERROR_BOUNDCOWORKERACCOUNTCOWORKERINCHOSENGROUP|The employee group contains one or more employees.\n</details>\n\n**Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n",
      "x-error-codes": [
        "EmployeeGroupNumberAlreadyExists",
        "ERROR_BOUNDCOWORKERACCOUNTCOWORKERINCHOSENGROUP"
      ],
      "x-required-roles": [
        "ProjectEmployee",
        "SuperUser"
      ]
    },
    {
      "name": "Activities",
      "description": "<code>Activities</code> provide the means to set custom prices for the time <code>Employees</code> spend working on a <code>Project</code>.<br>\r\n\r\n\r\n#### Examples of use cases:\r\n\r\n* Retrieve all activities.\r\n* Display the activities which allow time registration.\r\n\r\n\r\nRelated guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-aktivitet-i-projekt) (Danish)\r\n<details>\n<summary><b>Click to see the list of possible error codes.</b></summary>\n\n| Error Code | Description |\n| ---------- | ----------- |\n|ActivityNumberAlreadyExists|Activity cannot be created since the given number already exists.\n|ActivityGroupNumberDoesNotExist|Activity cannot be created or updated since the given group does not exist.\n|ActivityNameNullOrEmpty|Activity cannot be created or updated since its name cannot be null or empty.\n</details>\n\n**Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n",
      "x-error-codes": [
        "ActivityNumberAlreadyExists",
        "ActivityGroupNumberDoesNotExist",
        "ActivityNameNullOrEmpty"
      ],
      "x-required-roles": [
        "ProjectEmployee",
        "SuperUser"
      ]
    },
    {
      "name": "Activity Groups",
      "description": "<code>Activity Groups</code> allow for the classification of activities as:\r\n- productive, invoiceable,\r\n- productive, non-invoiceable or\r\n- unproductive.\r\n\r\nProductive activities are activities with economic value.\r\n\r\nThe distinction between invoiceable and non-invoiceable is whether time entries registered on an activity are to be considered billable to the user's customer or not.\r\n\r\nAdditionally, activity groups determine if registrations on an activity should have an impact on the financial accounting or not.\r\n\r\n\r\n#### Examples of use cases:\r\n\r\n* Retrieve all activity groups;\r\n* Display all activity groups when creating a new activity.\r\n\r\n\r\nRelated guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-en-aktivitetsgruppe) (Danish)\r\n<details>\n<summary><b>Click to see the list of possible error codes.</b></summary>\n\n| Error Code | Description |\n| ---------- | ----------- |\n|ActivityGroupCannotBeCreatedUpdatedNumberAlreadyExists|Activity group cannot be created since the given number already exists.\n|ActivityGroupCannotBeCreatedUpdatedCostDataInvalid|Activity group cannot be created or updated. If includeCostPriceInFinance is true, then costAccountOngoingType, costAccountOngoing, costContraAccountOngoing and costAccountClosed are required, otherwise they should be ommited.\n|ActivityGroupCannotBeCreatedUpdatedSalesDataInvalid|Activity group cannot be created or updated. If includeSalesPriceInFinance is true, then salesAccountOngoingType, salesAccountOngoing, salesContraAccountOngoing and salesAccountClosed are required, otherwise they should be ommited.\n|ActivityGroupCannotBeCreatedUpdatedAccountDoesNotExist|Activity group cannot be created or updated. The account does not exist.\n|ActivityGroupCannotBeCreatedUpdatedAccountIsBarred|Activity group cannot be created or updated. The account is barred.\n|ActivityGroupCannotBeCreatedUpdatedAccountIsOfWrongType|Activity group cannot be created or updated. The type of the account needs to be either `Balance` or `Profit & Loss`.\n</details>\n\n**Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n",
      "x-error-codes": [
        "ActivityGroupCannotBeCreatedUpdatedNumberAlreadyExists",
        "ActivityGroupCannotBeCreatedUpdatedCostDataInvalid",
        "ActivityGroupCannotBeCreatedUpdatedSalesDataInvalid",
        "ActivityGroupCannotBeCreatedUpdatedAccountDoesNotExist",
        "ActivityGroupCannotBeCreatedUpdatedAccountIsBarred",
        "ActivityGroupCannotBeCreatedUpdatedAccountIsOfWrongType"
      ],
      "x-required-roles": [
        "ProjectEmployee",
        "SuperUser"
      ]
    },
    {
      "name": "Project Customers",
      "description": "<code>Project-customers</code> endpoints return a list of all the existing customers that can be used within <code>Projects</code>.\r\n\r\n#### Examples of use cases:\r\n\r\n* Retrieve all available customers;\r\n* Display all customers when creating a new project.\r\n\r\n\r\nRelated guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-ny-kunde) (Danish)\r\n\r\n\n**Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n",
      "x-required-roles": [
        "ProjectEmployee",
        "SuperUser"
      ]
    },
    {
      "name": "Project Activities",
      "description": "<code>Project-activities</code> endpoints describe the relationship between projects and activities.\r\n\r\nTheir main purpose is to determine the period for which users can register time on a given <code>Project</code> and a given <code>Activity</code>.\r\n\r\nBy default, if there are no activities linked to a project, employees can register time on any activity.\r\n\r\n#### Examples of use cases:\r\n\r\n* Retrieve all project activities;\r\n* Display all the activities related to a project in order to determine the activities which allow the creation of time entries.\r\n\r\n\r\nRelated guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/bestem-hvilke-aktiviteter-et-projekt-kan-tidsregistreres-paa) (Danish)\r\n<details>\n<summary><b>Click to see the list of possible error codes.</b></summary>\n\n| Error Code | Description |\n| ---------- | ----------- |\n|ProjectActivityCannotBeCreatedProjectNotFound|Project activity entry cannot be created, the given project was not found.\n|ProjectActivityCannotBeCreatedActivityNotFound|Project activity entry cannot be created, the given activity was not found.\n|ProjectActivityCannotBeCreatedActivityAlreadyExists|Project activity entry cannot be created, the activity already exists on the given project.\n|ProjectActivityCannotBeCreatedActivityIsBarred|Project activity entry cannot be created, the given activity is barred.\n|ProjectActivityCannotBeCreatedUpdatedInvalidDates|Project activity entry cannot be created or updated, the start date must be before the end date.\n|ProjectActivityCannotBeCreatedProjectIsMain|Project activity entry cannot be registered on a main project.\n|ProjectActivityCannotBeCreatedProjectIsClosed|Project activity entry cannot be registered on a closed project.\n|ProjectActivityCannotBeCreatedProjectIsBarred|Project activity entry cannot be registered on a barred project.\n|ProjectActivityCannotBeUpdatedReadonlyProperties|Project activity entry cannot be updated, cannot modify readonly properties.\n|EntriesNotAllowedEmployeeNotFound|Entries not allowed because the given employee was not found.\n|EntriesNotAllowedEmployeeIsBarred|Entries not allowed because the given employee is barred.\n</details>\n\n**Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n",
      "x-error-codes": [
        "ProjectActivityCannotBeCreatedProjectNotFound",
        "ProjectActivityCannotBeCreatedActivityNotFound",
        "ProjectActivityCannotBeCreatedActivityAlreadyExists",
        "ProjectActivityCannotBeCreatedActivityIsBarred",
        "ProjectActivityCannotBeCreatedUpdatedInvalidDates",
        "ProjectActivityCannotBeCreatedProjectIsMain",
        "ProjectActivityCannotBeCreatedProjectIsClosed",
        "ProjectActivityCannotBeCreatedProjectIsBarred",
        "ProjectActivityCannotBeUpdatedReadonlyProperties",
        "EntriesNotAllowedEmployeeNotFound",
        "EntriesNotAllowedEmployeeIsBarred"
      ],
      "x-required-roles": [
        "ProjectEmployee",
        "SuperUser"
      ]
    },
    {
      "name": "Cost Types",
      "description": "<code>Cost types</code> endpoints help create expenses.\r\n\r\nThey determine whether an expense is invoiceable - through the cost type group assigned to the cost type - and the VAT code that's going to be applied.\r\n\r\n\r\n\r\n#### Example of use cases:\r\n\r\n* Retrieve all cost types;\r\n* Display all cost types when creating an expense.\r\n\r\nRelated guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/knapper-og-felter-i-projekter#omkostningprojekt) (Danish)\r\n\n**Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n",
      "x-required-roles": [
        "ProjectEmployee",
        "SuperUser"
      ]
    },
    {
      "name": "Cost Type Groups",
      "description": "<code>Cost type groups</code> endpoints help distinguish between invoiceable and non-invoiceable cost types.\r\n\r\nThe difference between the two is that only expenses with invoiceable cost types can be transferred to an invoice.\r\n\r\nAdditionally, cost type groups determine the accounts where booked expenses go.\r\n\r\n\r\n#### Example of use cases:\r\n\r\n* Retrieve information related to cost type groups.\r\n\r\nRelated guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-en-omkostningsgruppe-i-projekt) (Danish)\r\n\n**Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n",
      "x-required-roles": [
        "ProjectEmployee",
        "SuperUser"
      ]
    },
    {
      "name": "Employees",
      "description": "<code>Employees</code> endpoints help retrieve the list of existing employees.\r\n\r\n\r\n#### Examples of use cases:\r\n\r\n* Retrieve all employees who have a certain name;\r\n* Display all employees when selecting a contact person for a project, sales document or customer.\r\n\r\n\r\nRelated guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/medarbejdere) (Danish)\r\n<details>\n<summary><b>Click to see the list of possible error codes.</b></summary>\n\n| Error Code | Description |\n| ---------- | ----------- |\n|EmployeeCannotBeCreatedUpdatedNumberAlreadyExists|Employee cannot be created since the given number already exists.\n|EmployeeCannotBeCreatedUpdatedGroupNotFound|Employee cannot be created or updated since the given employee group was not found.\n|EmployeeCannotBeCreatedUpdatedNameNullOrEmpty|Employee cannot be created or updated since employee name cannot be null or empty.\n|ERROR_BOUNDCOWORKERTHEREISNUMBEROFPOSTSONDRAFTS|Finance vouchers exist for the selected employee.\n|ERROR_BOUNDCOWORKERACCOUNTNUMBEROFTIMEREGISTERINGONCOWORKER|There is/are time entry(ies) for the selected employee.\n|ERROR_BOUNDCOWORKERACCOUNTNUMBEROFEXPENSEREGISTERINGONCOWORKER|There is/are expense entry(ies) for the selected employee.\n|ERROR_BOUNDCOWORKERACCOUNTNUMBEROFMILEAGEENTRIESONCOWORKER|There is/are milage entry(ies) for the selected employee.\n|ERROR_BOUNDCOWORKERACCOUNTCOWORKERRESPONSIBLENUMBEROFCASES|The employee is responsible for project(s).\n|ERROR_BOUNDCOWORKERACCOUNTCOWORKERISBOUNDEDTOUSERSACCESSOFTIMEREGISTERING|The employee is linked to a user's access to time recording.\n|ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFDEBITORS|The employee is a sales representative for customer(s).\n|ERROR_BOUNDCOWORKERACCOUNTCOWORKERISOURREFFORNUMBEROFCREDITORS|The employee is linked to supplier(s).\n|ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFINVOICES|The employee is a sales representative for invoice(s).\n|ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFDRAFTS|The employee is a sales representative for draft invoice(s).\n|ERROR_BOUNDCOWORKERACCOUNTCOWORKERISREFMANFORNUMBEROFPURCHASEORDERS|The employee is linked to purchase order(s).\n</details>\n\n**Required application roles:** Sales or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n",
      "x-error-codes": [
        "EmployeeCannotBeCreatedUpdatedNumberAlreadyExists",
        "EmployeeCannotBeCreatedUpdatedGroupNotFound",
        "EmployeeCannotBeCreatedUpdatedNameNullOrEmpty",
        "ERROR_BOUNDCOWORKERTHEREISNUMBEROFPOSTSONDRAFTS",
        "ERROR_BOUNDCOWORKERACCOUNTNUMBEROFTIMEREGISTERINGONCOWORKER",
        "ERROR_BOUNDCOWORKERACCOUNTNUMBEROFEXPENSEREGISTERINGONCOWORKER",
        "ERROR_BOUNDCOWORKERACCOUNTNUMBEROFMILEAGEENTRIESONCOWORKER",
        "ERROR_BOUNDCOWORKERACCOUNTCOWORKERRESPONSIBLENUMBEROFCASES",
        "ERROR_BOUNDCOWORKERACCOUNTCOWORKERISBOUNDEDTOUSERSACCESSOFTIMEREGISTERING",
        "ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFDEBITORS",
        "ERROR_BOUNDCOWORKERACCOUNTCOWORKERISOURREFFORNUMBEROFCREDITORS",
        "ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFINVOICES",
        "ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFDRAFTS",
        "ERROR_BOUNDCOWORKERACCOUNTCOWORKERISREFMANFORNUMBEROFPURCHASEORDERS"
      ],
      "x-required-roles": [
        "Sales",
        "SuperUser"
      ]
    },
    {
      "name": "Employee groups",
      "description": "<code>Employee Groups</code> help distinguish between various categories of employees.\r\n\r\n\r\n#### Examples of use cases:\r\n\r\n* Retrieve all employee groups;\r\n* Display all employee groups when creating a new employee.\r\n\r\n\r\nRelated guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-medarbejdergruppe) (Danish)<details>\n<summary><b>Click to see the list of possible error codes.</b></summary>\n\n| Error Code | Description |\n| ---------- | ----------- |\n|EmployeeGroupNumberAlreadyExists|Employee group cannot be created since the given number already exists.\n|ERROR_BOUNDCOWORKERACCOUNTCOWORKERINCHOSENGROUP|The employee group contains one or more employees.\n</details>\n\n**Required application roles:** Sales or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n",
      "x-error-codes": [
        "EmployeeGroupNumberAlreadyExists",
        "ERROR_BOUNDCOWORKERACCOUNTCOWORKERINCHOSENGROUP"
      ],
      "x-required-roles": [
        "Sales",
        "SuperUser"
      ]
    }
  ],
  "x-tagGroups": [
    {
      "name": "Projects",
      "tags": [
        "Projects",
        "Project Statuses",
        "Project Groups",
        "Time entries",
        "Time entry prices",
        "Mileage entries",
        "Mileage entry prices",
        "Project employees",
        "Project employee groups",
        "Activities",
        "Activity Groups",
        "Project Customers",
        "Project Activities",
        "Cost Types",
        "Cost Type Groups"
      ]
    },
    {
      "name": "Sales",
      "tags": [
        "Employees",
        "Employee groups"
      ]
    }
  ]
}